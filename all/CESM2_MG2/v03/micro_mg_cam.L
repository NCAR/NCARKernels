NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

   453: inl(1212): Source for routine not found.: KGEN_UTILS_MOD::KGEN_ARRAY_SUMCHECK
   453: vec( 126): Idiom detected.: SUM
   453: opt(1592): Outer loop unrolled inside inner loop.
   453: vec( 101): Vectorized loop.
   459: vec( 126): Idiom detected.: SUM
   459: opt(1592): Outer loop unrolled inside inner loop.
   459: vec( 101): Vectorized loop.
   465: vec( 126): Idiom detected.: SUM
   465: opt(1592): Outer loop unrolled inside inner loop.
   465: vec( 101): Vectorized loop.
   471: vec( 126): Idiom detected.: SUM
   471: opt(1592): Outer loop unrolled inside inner loop.
   471: vec( 101): Vectorized loop.
   477: vec( 126): Idiom detected.: SUM
   477: opt(1592): Outer loop unrolled inside inner loop.
   477: vec( 101): Vectorized loop.
   483: vec( 126): Idiom detected.: SUM
   483: opt(1592): Outer loop unrolled inside inner loop.
   483: vec( 101): Vectorized loop.
   489: vec( 126): Idiom detected.: SUM
   489: opt(1592): Outer loop unrolled inside inner loop.
   489: vec( 101): Vectorized loop.
   495: vec( 126): Idiom detected.: SUM
   495: opt(1592): Outer loop unrolled inside inner loop.
   495: vec( 101): Vectorized loop.
   501: vec( 126): Idiom detected.: SUM
   501: opt(1592): Outer loop unrolled inside inner loop.
   501: vec( 101): Vectorized loop.
   507: vec( 126): Idiom detected.: SUM
   507: opt(1592): Outer loop unrolled inside inner loop.
   507: vec( 101): Vectorized loop.
   513: vec( 126): Idiom detected.: SUM
   513: opt(1592): Outer loop unrolled inside inner loop.
   513: vec( 101): Vectorized loop.
   520: vec( 126): Idiom detected.: SUM
   520: opt(1592): Outer loop unrolled inside inner loop.
   520: vec( 101): Vectorized loop.
   527: vec( 126): Idiom detected.: SUM
   527: opt(1592): Outer loop unrolled inside inner loop.
   527: vec( 101): Vectorized loop.
   533: vec( 126): Idiom detected.: SUM
   533: opt(1592): Outer loop unrolled inside inner loop.
   533: vec( 101): Vectorized loop.
   540: vec( 126): Idiom detected.: SUM
   540: opt(1592): Outer loop unrolled inside inner loop.
   540: vec( 101): Vectorized loop.
   547: vec( 126): Idiom detected.: SUM
   547: opt(1592): Outer loop unrolled inside inner loop.
   547: vec( 101): Vectorized loop.
   554: vec( 126): Idiom detected.: SUM
   554: opt(1592): Outer loop unrolled inside inner loop.
   554: vec( 101): Vectorized loop.
   557: inl(1214): Expansion routine is too big for automatic expansion.: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KR_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM2
   562: vec( 126): Idiom detected.: SUM
   562: opt(1592): Outer loop unrolled inside inner loop.
   562: vec( 101): Vectorized loop.
   569: vec( 126): Idiom detected.: SUM
   569: opt(1592): Outer loop unrolled inside inner loop.
   569: vec( 101): Vectorized loop.
   572: inl(1214): Expansion routine is too big for automatic expansion.: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KR_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM3
   578: vec( 126): Idiom detected.: SUM
   578: opt(1592): Outer loop unrolled inside inner loop.
   578: vec( 101): Vectorized loop.
   585: vec( 126): Idiom detected.: SUM
   585: opt(1592): Outer loop unrolled inside inner loop.
   585: vec( 101): Vectorized loop.
   592: vec( 126): Idiom detected.: SUM
   592: opt(1592): Outer loop unrolled inside inner loop.
   592: vec( 101): Vectorized loop.
   599: vec( 126): Idiom detected.: SUM
   599: opt(1592): Outer loop unrolled inside inner loop.
   599: vec( 101): Vectorized loop.
   606: vec( 126): Idiom detected.: SUM
   606: opt(1592): Outer loop unrolled inside inner loop.
   606: vec( 101): Vectorized loop.
   613: vec( 126): Idiom detected.: SUM
   613: opt(1592): Outer loop unrolled inside inner loop.
   613: vec( 101): Vectorized loop.
   620: vec( 126): Idiom detected.: SUM
   620: opt(1592): Outer loop unrolled inside inner loop.
   620: vec( 101): Vectorized loop.
   627: vec( 126): Idiom detected.: SUM
   627: opt(1592): Outer loop unrolled inside inner loop.
   627: vec( 101): Vectorized loop.
   634: vec( 126): Idiom detected.: SUM
   634: opt(1592): Outer loop unrolled inside inner loop.
   634: vec( 101): Vectorized loop.
   641: vec( 126): Idiom detected.: SUM
   641: opt(1592): Outer loop unrolled inside inner loop.
   641: vec( 101): Vectorized loop.
   648: vec( 126): Idiom detected.: SUM
   648: opt(1592): Outer loop unrolled inside inner loop.
   648: vec( 101): Vectorized loop.
   655: vec( 126): Idiom detected.: SUM
   655: opt(1592): Outer loop unrolled inside inner loop.
   655: vec( 101): Vectorized loop.
   662: vec( 126): Idiom detected.: SUM
   662: opt(1592): Outer loop unrolled inside inner loop.
   662: vec( 101): Vectorized loop.
   669: vec( 126): Idiom detected.: SUM
   669: opt(1592): Outer loop unrolled inside inner loop.
   669: vec( 101): Vectorized loop.
   676: vec( 126): Idiom detected.: SUM
   676: opt(1592): Outer loop unrolled inside inner loop.
   676: vec( 101): Vectorized loop.
   683: vec( 126): Idiom detected.: SUM
   683: opt(1592): Outer loop unrolled inside inner loop.
   683: vec( 101): Vectorized loop.
   690: vec( 126): Idiom detected.: SUM
   690: opt(1592): Outer loop unrolled inside inner loop.
   690: vec( 101): Vectorized loop.
   697: vec( 126): Idiom detected.: SUM
   697: vec( 101): Vectorized loop.
   704: vec( 126): Idiom detected.: SUM
   704: vec( 101): Vectorized loop.
   711: vec( 126): Idiom detected.: SUM
   711: opt(1592): Outer loop unrolled inside inner loop.
   711: vec( 101): Vectorized loop.
   718: vec( 126): Idiom detected.: SUM
   718: opt(1592): Outer loop unrolled inside inner loop.
   718: vec( 101): Vectorized loop.
   725: vec( 126): Idiom detected.: SUM
   725: opt(1592): Outer loop unrolled inside inner loop.
   725: vec( 101): Vectorized loop.
   732: vec( 126): Idiom detected.: SUM
   732: opt(1592): Outer loop unrolled inside inner loop.
   732: vec( 101): Vectorized loop.
   739: vec( 126): Idiom detected.: SUM
   739: opt(1592): Outer loop unrolled inside inner loop.
   739: vec( 101): Vectorized loop.
   746: vec( 126): Idiom detected.: SUM
   746: opt(1592): Outer loop unrolled inside inner loop.
   746: vec( 101): Vectorized loop.
   753: vec( 126): Idiom detected.: SUM
   753: opt(1592): Outer loop unrolled inside inner loop.
   753: vec( 101): Vectorized loop.
   760: vec( 126): Idiom detected.: SUM
   760: opt(1592): Outer loop unrolled inside inner loop.
   760: vec( 101): Vectorized loop.
   767: vec( 126): Idiom detected.: SUM
   767: opt(1592): Outer loop unrolled inside inner loop.
   767: vec( 101): Vectorized loop.
   774: vec( 126): Idiom detected.: SUM
   774: opt(1592): Outer loop unrolled inside inner loop.
   774: vec( 101): Vectorized loop.
   781: vec( 126): Idiom detected.: SUM
   781: opt(1592): Outer loop unrolled inside inner loop.
   781: vec( 101): Vectorized loop.
   788: vec( 126): Idiom detected.: SUM
   788: opt(1592): Outer loop unrolled inside inner loop.
   788: vec( 101): Vectorized loop.
   795: vec( 126): Idiom detected.: SUM
   795: opt(1592): Outer loop unrolled inside inner loop.
   795: vec( 101): Vectorized loop.
   802: vec( 126): Idiom detected.: SUM
   802: opt(1592): Outer loop unrolled inside inner loop.
   802: vec( 101): Vectorized loop.
   809: vec( 126): Idiom detected.: SUM
   809: opt(1592): Outer loop unrolled inside inner loop.
   809: vec( 101): Vectorized loop.
   816: vec( 126): Idiom detected.: SUM
   816: opt(1592): Outer loop unrolled inside inner loop.
   816: vec( 101): Vectorized loop.
   823: vec( 126): Idiom detected.: SUM
   823: opt(1592): Outer loop unrolled inside inner loop.
   823: vec( 101): Vectorized loop.
   830: vec( 126): Idiom detected.: SUM
   830: opt(1592): Outer loop unrolled inside inner loop.
   830: vec( 101): Vectorized loop.
   837: vec( 126): Idiom detected.: SUM
   837: opt(1592): Outer loop unrolled inside inner loop.
   837: vec( 101): Vectorized loop.
   844: vec( 126): Idiom detected.: SUM
   844: opt(1592): Outer loop unrolled inside inner loop.
   844: vec( 101): Vectorized loop.
   851: vec( 126): Idiom detected.: SUM
   851: opt(1592): Outer loop unrolled inside inner loop.
   851: vec( 101): Vectorized loop.
   858: vec( 126): Idiom detected.: SUM
   858: opt(1592): Outer loop unrolled inside inner loop.
   858: vec( 101): Vectorized loop.
   865: vec( 126): Idiom detected.: SUM
   865: opt(1592): Outer loop unrolled inside inner loop.
   865: vec( 101): Vectorized loop.
   871: vec( 126): Idiom detected.: SUM
   871: opt(1592): Outer loop unrolled inside inner loop.
   871: vec( 101): Vectorized loop.
   877: vec( 126): Idiom detected.: SUM
   877: opt(1592): Outer loop unrolled inside inner loop.
   877: vec( 101): Vectorized loop.
   883: vec( 126): Idiom detected.: SUM
   883: opt(1592): Outer loop unrolled inside inner loop.
   883: vec( 101): Vectorized loop.
   889: vec( 126): Idiom detected.: SUM
   889: opt(1592): Outer loop unrolled inside inner loop.
   889: vec( 101): Vectorized loop.
   896: vec( 126): Idiom detected.: SUM
   896: opt(1592): Outer loop unrolled inside inner loop.
   896: vec( 101): Vectorized loop.
   903: vec( 126): Idiom detected.: SUM
   903: opt(1592): Outer loop unrolled inside inner loop.
   903: vec( 101): Vectorized loop.
   910: vec( 126): Idiom detected.: SUM
   910: opt(1592): Outer loop unrolled inside inner loop.
   910: vec( 101): Vectorized loop.
   917: vec( 126): Idiom detected.: SUM
   917: opt(1592): Outer loop unrolled inside inner loop.
   917: vec( 101): Vectorized loop.
   924: vec( 126): Idiom detected.: SUM
   924: opt(1592): Outer loop unrolled inside inner loop.
   924: vec( 101): Vectorized loop.
   931: vec( 126): Idiom detected.: SUM
   931: opt(1592): Outer loop unrolled inside inner loop.
   931: vec( 101): Vectorized loop.
   938: vec( 126): Idiom detected.: SUM
   938: opt(1592): Outer loop unrolled inside inner loop.
   938: vec( 101): Vectorized loop.
   945: vec( 126): Idiom detected.: SUM
   945: opt(1592): Outer loop unrolled inside inner loop.
   945: vec( 101): Vectorized loop.
   952: vec( 126): Idiom detected.: SUM
   952: opt(1592): Outer loop unrolled inside inner loop.
   952: vec( 101): Vectorized loop.
   959: vec( 126): Idiom detected.: SUM
   959: opt(1592): Outer loop unrolled inside inner loop.
   959: vec( 101): Vectorized loop.
   966: vec( 126): Idiom detected.: SUM
   966: opt(1592): Outer loop unrolled inside inner loop.
   966: vec( 101): Vectorized loop.
   973: vec( 126): Idiom detected.: SUM
   973: opt(1592): Outer loop unrolled inside inner loop.
   973: vec( 101): Vectorized loop.
   980: vec( 126): Idiom detected.: SUM
   980: opt(1592): Outer loop unrolled inside inner loop.
   980: vec( 101): Vectorized loop.
   987: vec( 126): Idiom detected.: SUM
   987: opt(1592): Outer loop unrolled inside inner loop.
   987: vec( 101): Vectorized loop.
   994: vec( 126): Idiom detected.: SUM
   994: opt(1592): Outer loop unrolled inside inner loop.
   994: vec( 101): Vectorized loop.
  1001: vec( 126): Idiom detected.: SUM
  1001: opt(1592): Outer loop unrolled inside inner loop.
  1001: vec( 101): Vectorized loop.
  1008: vec( 126): Idiom detected.: SUM
  1008: opt(1592): Outer loop unrolled inside inner loop.
  1008: vec( 101): Vectorized loop.
  1015: vec( 126): Idiom detected.: SUM
  1015: opt(1592): Outer loop unrolled inside inner loop.
  1015: vec( 101): Vectorized loop.
  1022: vec( 126): Idiom detected.: SUM
  1022: opt(1592): Outer loop unrolled inside inner loop.
  1022: vec( 101): Vectorized loop.
  1029: vec( 126): Idiom detected.: SUM
  1029: opt(1592): Outer loop unrolled inside inner loop.
  1029: vec( 101): Vectorized loop.
  1036: vec( 126): Idiom detected.: SUM
  1036: opt(1592): Outer loop unrolled inside inner loop.
  1036: vec( 101): Vectorized loop.
  1043: vec( 126): Idiom detected.: SUM
  1043: opt(1592): Outer loop unrolled inside inner loop.
  1043: vec( 101): Vectorized loop.
  1050: vec( 126): Idiom detected.: SUM
  1050: opt(1592): Outer loop unrolled inside inner loop.
  1050: vec( 101): Vectorized loop.
  1057: vec( 126): Idiom detected.: SUM
  1057: opt(1592): Outer loop unrolled inside inner loop.
  1057: vec( 101): Vectorized loop.
  1064: vec( 126): Idiom detected.: SUM
  1064: opt(1592): Outer loop unrolled inside inner loop.
  1064: vec( 101): Vectorized loop.
  1071: vec( 126): Idiom detected.: SUM
  1071: opt(1592): Outer loop unrolled inside inner loop.
  1071: vec( 101): Vectorized loop.
  1078: vec( 126): Idiom detected.: SUM
  1078: opt(1592): Outer loop unrolled inside inner loop.
  1078: vec( 101): Vectorized loop.
  1085: vec( 126): Idiom detected.: SUM
  1085: opt(1592): Outer loop unrolled inside inner loop.
  1085: vec( 101): Vectorized loop.
  1092: vec( 126): Idiom detected.: SUM
  1092: opt(1592): Outer loop unrolled inside inner loop.
  1092: vec( 101): Vectorized loop.
  1099: vec( 126): Idiom detected.: SUM
  1099: opt(1592): Outer loop unrolled inside inner loop.
  1099: vec( 101): Vectorized loop.
  1106: vec( 126): Idiom detected.: SUM
  1106: opt(1592): Outer loop unrolled inside inner loop.
  1106: vec( 101): Vectorized loop.
  1113: vec( 126): Idiom detected.: SUM
  1113: opt(1592): Outer loop unrolled inside inner loop.
  1113: vec( 101): Vectorized loop.
  1120: vec( 126): Idiom detected.: SUM
  1120: opt(1592): Outer loop unrolled inside inner loop.
  1120: vec( 101): Vectorized loop.
  1127: vec( 126): Idiom detected.: SUM
  1127: opt(1592): Outer loop unrolled inside inner loop.
  1127: vec( 101): Vectorized loop.
  1134: vec( 126): Idiom detected.: SUM
  1134: opt(1592): Outer loop unrolled inside inner loop.
  1134: vec( 101): Vectorized loop.
  1141: vec( 126): Idiom detected.: SUM
  1141: opt(1592): Outer loop unrolled inside inner loop.
  1141: vec( 101): Vectorized loop.
  1148: vec( 126): Idiom detected.: SUM
  1148: opt(1592): Outer loop unrolled inside inner loop.
  1148: vec( 101): Vectorized loop.
  1155: vec( 126): Idiom detected.: SUM
  1155: opt(1592): Outer loop unrolled inside inner loop.
  1155: vec( 101): Vectorized loop.
  1161: vec( 126): Idiom detected.: SUM
  1161: opt(1592): Outer loop unrolled inside inner loop.
  1161: vec( 101): Vectorized loop.
  1167: vec( 126): Idiom detected.: SUM
  1167: opt(1592): Outer loop unrolled inside inner loop.
  1167: vec( 101): Vectorized loop.
  1174: vec( 126): Idiom detected.: SUM
  1174: opt(1592): Outer loop unrolled inside inner loop.
  1174: vec( 101): Vectorized loop.
  1181: vec( 126): Idiom detected.: SUM
  1181: opt(1592): Outer loop unrolled inside inner loop.
  1181: vec( 101): Vectorized loop.
  1188: vec( 126): Idiom detected.: SUM
  1188: opt(1592): Outer loop unrolled inside inner loop.
  1188: vec( 101): Vectorized loop.
  1194: vec( 126): Idiom detected.: SUM
  1194: opt(1592): Outer loop unrolled inside inner loop.
  1194: vec( 101): Vectorized loop.
  1200: vec( 126): Idiom detected.: SUM
  1200: opt(1592): Outer loop unrolled inside inner loop.
  1200: vec( 101): Vectorized loop.
  1206: vec( 126): Idiom detected.: SUM
  1206: opt(1592): Outer loop unrolled inside inner loop.
  1206: vec( 101): Vectorized loop.
  1212: vec( 126): Idiom detected.: SUM
  1212: opt(1592): Outer loop unrolled inside inner loop.
  1212: vec( 101): Vectorized loop.
  1218: vec( 126): Idiom detected.: SUM
  1218: opt(1592): Outer loop unrolled inside inner loop.
  1218: vec( 101): Vectorized loop.
  1224: vec( 126): Idiom detected.: SUM
  1224: opt(1592): Outer loop unrolled inside inner loop.
  1224: vec( 101): Vectorized loop.
  1231: vec( 126): Idiom detected.: SUM
  1231: opt(1592): Outer loop unrolled inside inner loop.
  1231: vec( 101): Vectorized loop.
  1237: inl(1222): Inlined: MICRO_MG_CAM::KR_EXTERNS_OUT_MICRO_MG_CAM
  1238: inl(1212): Source for routine not found.: MICRO_MG2_0::KR_EXTERNS_OUT_MICRO_MG2_0
  1239: inl(1212): Source for routine not found.: MICRO_MG_UTILS::KR_EXTERNS_OUT_MICRO_MG_UTILS
  1240: inl(1212): Source for routine not found.: WV_SAT_METHODS::KR_EXTERNS_OUT_WV_SAT_METHODS
  1247: vec( 126): Idiom detected.: SUM
  1247: opt(1592): Outer loop unrolled inside inner loop.
  1247: vec( 101): Vectorized loop.
  1254: vec( 126): Idiom detected.: SUM
  1254: opt(1592): Outer loop unrolled inside inner loop.
  1254: vec( 101): Vectorized loop.
  1261: vec( 126): Idiom detected.: SUM
  1261: opt(1592): Outer loop unrolled inside inner loop.
  1261: vec( 101): Vectorized loop.
  1268: vec( 126): Idiom detected.: SUM
  1268: opt(1592): Outer loop unrolled inside inner loop.
  1268: vec( 101): Vectorized loop.
  1275: vec( 126): Idiom detected.: SUM
  1275: opt(1592): Outer loop unrolled inside inner loop.
  1275: vec( 101): Vectorized loop.
  1282: vec( 126): Idiom detected.: SUM
  1282: opt(1592): Outer loop unrolled inside inner loop.
  1282: vec( 101): Vectorized loop.
  1289: vec( 126): Idiom detected.: SUM
  1289: opt(1592): Outer loop unrolled inside inner loop.
  1289: vec( 101): Vectorized loop.
  1296: vec( 126): Idiom detected.: SUM
  1296: opt(1592): Outer loop unrolled inside inner loop.
  1296: vec( 101): Vectorized loop.
  1303: vec( 126): Idiom detected.: SUM
  1303: opt(1592): Outer loop unrolled inside inner loop.
  1303: vec( 101): Vectorized loop.
  1310: vec( 126): Idiom detected.: SUM
  1310: opt(1592): Outer loop unrolled inside inner loop.
  1310: vec( 101): Vectorized loop.
  1317: vec( 126): Idiom detected.: SUM
  1317: opt(1592): Outer loop unrolled inside inner loop.
  1317: vec( 101): Vectorized loop.
  1324: vec( 126): Idiom detected.: SUM
  1324: vec( 101): Vectorized loop.
  1331: vec( 126): Idiom detected.: SUM
  1331: vec( 101): Vectorized loop.
  1338: vec( 126): Idiom detected.: SUM
  1338: opt(1592): Outer loop unrolled inside inner loop.
  1338: vec( 101): Vectorized loop.
  1345: vec( 126): Idiom detected.: SUM
  1345: opt(1592): Outer loop unrolled inside inner loop.
  1345: vec( 101): Vectorized loop.
  1352: vec( 126): Idiom detected.: SUM
  1352: opt(1592): Outer loop unrolled inside inner loop.
  1352: vec( 101): Vectorized loop.
  1359: vec( 126): Idiom detected.: SUM
  1359: opt(1592): Outer loop unrolled inside inner loop.
  1359: vec( 101): Vectorized loop.
  1366: vec( 126): Idiom detected.: SUM
  1366: opt(1592): Outer loop unrolled inside inner loop.
  1366: vec( 101): Vectorized loop.
  1373: vec( 126): Idiom detected.: SUM
  1373: opt(1592): Outer loop unrolled inside inner loop.
  1373: vec( 101): Vectorized loop.
  1380: vec( 126): Idiom detected.: SUM
  1380: opt(1592): Outer loop unrolled inside inner loop.
  1380: vec( 101): Vectorized loop.
  1387: vec( 126): Idiom detected.: SUM
  1387: opt(1592): Outer loop unrolled inside inner loop.
  1387: vec( 101): Vectorized loop.
  1394: vec( 126): Idiom detected.: SUM
  1394: opt(1592): Outer loop unrolled inside inner loop.
  1394: vec( 101): Vectorized loop.
  1401: vec( 126): Idiom detected.: SUM
  1401: opt(1592): Outer loop unrolled inside inner loop.
  1401: vec( 101): Vectorized loop.
  1408: vec( 126): Idiom detected.: SUM
  1408: opt(1592): Outer loop unrolled inside inner loop.
  1408: vec( 101): Vectorized loop.
  1415: vec( 126): Idiom detected.: SUM
  1415: opt(1592): Outer loop unrolled inside inner loop.
  1415: vec( 101): Vectorized loop.
  1422: vec( 126): Idiom detected.: SUM
  1422: opt(1592): Outer loop unrolled inside inner loop.
  1422: vec( 101): Vectorized loop.
  1429: vec( 126): Idiom detected.: SUM
  1429: opt(1592): Outer loop unrolled inside inner loop.
  1429: vec( 101): Vectorized loop.
  1436: vec( 126): Idiom detected.: SUM
  1436: opt(1592): Outer loop unrolled inside inner loop.
  1436: vec( 101): Vectorized loop.
  1443: vec( 126): Idiom detected.: SUM
  1443: opt(1592): Outer loop unrolled inside inner loop.
  1443: vec( 101): Vectorized loop.
  1450: vec( 126): Idiom detected.: SUM
  1450: opt(1592): Outer loop unrolled inside inner loop.
  1450: vec( 101): Vectorized loop.
  1457: vec( 126): Idiom detected.: SUM
  1457: opt(1592): Outer loop unrolled inside inner loop.
  1457: vec( 101): Vectorized loop.
  1464: vec( 126): Idiom detected.: SUM
  1464: opt(1592): Outer loop unrolled inside inner loop.
  1464: vec( 101): Vectorized loop.
  1471: vec( 126): Idiom detected.: SUM
  1471: opt(1592): Outer loop unrolled inside inner loop.
  1471: vec( 101): Vectorized loop.
  1478: vec( 126): Idiom detected.: SUM
  1478: opt(1592): Outer loop unrolled inside inner loop.
  1478: vec( 101): Vectorized loop.
  1485: vec( 126): Idiom detected.: SUM
  1485: opt(1592): Outer loop unrolled inside inner loop.
  1485: vec( 101): Vectorized loop.
  1492: vec( 126): Idiom detected.: SUM
  1492: opt(1592): Outer loop unrolled inside inner loop.
  1492: vec( 101): Vectorized loop.
  1499: vec( 126): Idiom detected.: SUM
  1499: opt(1592): Outer loop unrolled inside inner loop.
  1499: vec( 101): Vectorized loop.
  1506: vec( 126): Idiom detected.: SUM
  1506: opt(1592): Outer loop unrolled inside inner loop.
  1506: vec( 101): Vectorized loop.
  1513: vec( 126): Idiom detected.: SUM
  1513: opt(1592): Outer loop unrolled inside inner loop.
  1513: vec( 101): Vectorized loop.
  1520: vec( 126): Idiom detected.: SUM
  1520: opt(1592): Outer loop unrolled inside inner loop.
  1520: vec( 101): Vectorized loop.
  1527: vec( 126): Idiom detected.: SUM
  1527: opt(1592): Outer loop unrolled inside inner loop.
  1527: vec( 101): Vectorized loop.
  1534: vec( 126): Idiom detected.: SUM
  1534: opt(1592): Outer loop unrolled inside inner loop.
  1534: vec( 101): Vectorized loop.
  1541: vec( 126): Idiom detected.: SUM
  1541: opt(1592): Outer loop unrolled inside inner loop.
  1541: vec( 101): Vectorized loop.
  1548: vec( 126): Idiom detected.: SUM
  1548: opt(1592): Outer loop unrolled inside inner loop.
  1548: vec( 101): Vectorized loop.
  1555: vec( 126): Idiom detected.: SUM
  1555: opt(1592): Outer loop unrolled inside inner loop.
  1555: vec( 101): Vectorized loop.
  1562: vec( 126): Idiom detected.: SUM
  1562: opt(1592): Outer loop unrolled inside inner loop.
  1562: vec( 101): Vectorized loop.
  1569: vec( 126): Idiom detected.: SUM
  1569: opt(1592): Outer loop unrolled inside inner loop.
  1569: vec( 101): Vectorized loop.
  1576: vec( 126): Idiom detected.: SUM
  1576: opt(1592): Outer loop unrolled inside inner loop.
  1576: vec( 101): Vectorized loop.
  1583: vec( 126): Idiom detected.: SUM
  1583: opt(1592): Outer loop unrolled inside inner loop.
  1583: vec( 101): Vectorized loop.
  1590: vec( 126): Idiom detected.: SUM
  1590: opt(1592): Outer loop unrolled inside inner loop.
  1590: vec( 101): Vectorized loop.
  1597: vec( 126): Idiom detected.: SUM
  1597: opt(1592): Outer loop unrolled inside inner loop.
  1597: vec( 101): Vectorized loop.
  1604: vec( 126): Idiom detected.: SUM
  1604: opt(1592): Outer loop unrolled inside inner loop.
  1604: vec( 101): Vectorized loop.
  1611: vec( 126): Idiom detected.: SUM
  1611: opt(1592): Outer loop unrolled inside inner loop.
  1611: vec( 101): Vectorized loop.
  1618: vec( 126): Idiom detected.: SUM
  1618: opt(1592): Outer loop unrolled inside inner loop.
  1618: vec( 101): Vectorized loop.
  1625: vec( 126): Idiom detected.: SUM
  1625: opt(1592): Outer loop unrolled inside inner loop.
  1625: vec( 101): Vectorized loop.
  1632: vec( 126): Idiom detected.: SUM
  1632: opt(1592): Outer loop unrolled inside inner loop.
  1632: vec( 101): Vectorized loop.
  1639: vec( 126): Idiom detected.: SUM
  1639: opt(1592): Outer loop unrolled inside inner loop.
  1639: vec( 101): Vectorized loop.
  1646: vec( 126): Idiom detected.: SUM
  1646: opt(1592): Outer loop unrolled inside inner loop.
  1646: vec( 101): Vectorized loop.
  1653: vec( 126): Idiom detected.: SUM
  1653: opt(1592): Outer loop unrolled inside inner loop.
  1653: vec( 101): Vectorized loop.
  1660: vec( 126): Idiom detected.: SUM
  1660: opt(1592): Outer loop unrolled inside inner loop.
  1660: vec( 101): Vectorized loop.
  1667: vec( 126): Idiom detected.: SUM
  1667: opt(1592): Outer loop unrolled inside inner loop.
  1667: vec( 101): Vectorized loop.
  1674: vec( 126): Idiom detected.: SUM
  1674: opt(1592): Outer loop unrolled inside inner loop.
  1674: vec( 101): Vectorized loop.
  1681: vec( 126): Idiom detected.: SUM
  1681: opt(1592): Outer loop unrolled inside inner loop.
  1681: vec( 101): Vectorized loop.
  1688: vec( 126): Idiom detected.: SUM
  1688: opt(1592): Outer loop unrolled inside inner loop.
  1688: vec( 101): Vectorized loop.
  1695: vec( 126): Idiom detected.: SUM
  1695: opt(1592): Outer loop unrolled inside inner loop.
  1695: vec( 101): Vectorized loop.
  1702: vec( 126): Idiom detected.: SUM
  1702: opt(1592): Outer loop unrolled inside inner loop.
  1702: vec( 101): Vectorized loop.
  1709: vec( 126): Idiom detected.: SUM
  1709: opt(1592): Outer loop unrolled inside inner loop.
  1709: vec( 101): Vectorized loop.
  1716: vec( 126): Idiom detected.: SUM
  1716: opt(1592): Outer loop unrolled inside inner loop.
  1716: vec( 101): Vectorized loop.
  1723: vec( 126): Idiom detected.: SUM
  1723: opt(1592): Outer loop unrolled inside inner loop.
  1723: vec( 101): Vectorized loop.
  1730: vec( 126): Idiom detected.: SUM
  1730: opt(1592): Outer loop unrolled inside inner loop.
  1730: vec( 101): Vectorized loop.
  1737: vec( 126): Idiom detected.: SUM
  1737: opt(1592): Outer loop unrolled inside inner loop.
  1737: vec( 101): Vectorized loop.
  1744: vec( 126): Idiom detected.: SUM
  1744: opt(1592): Outer loop unrolled inside inner loop.
  1744: vec( 101): Vectorized loop.
  1751: vec( 126): Idiom detected.: SUM
  1751: opt(1592): Outer loop unrolled inside inner loop.
  1751: vec( 101): Vectorized loop.
  1758: vec( 126): Idiom detected.: SUM
  1758: opt(1592): Outer loop unrolled inside inner loop.
  1758: vec( 101): Vectorized loop.
  1765: vec( 126): Idiom detected.: SUM
  1765: opt(1592): Outer loop unrolled inside inner loop.
  1765: vec( 101): Vectorized loop.
  1772: vec( 126): Idiom detected.: SUM
  1772: opt(1592): Outer loop unrolled inside inner loop.
  1772: vec( 101): Vectorized loop.
  1779: vec( 126): Idiom detected.: SUM
  1779: opt(1592): Outer loop unrolled inside inner loop.
  1779: vec( 101): Vectorized loop.
  1786: vec( 126): Idiom detected.: SUM
  1786: opt(1592): Outer loop unrolled inside inner loop.
  1786: vec( 101): Vectorized loop.
  1793: vec( 126): Idiom detected.: SUM
  1793: opt(1592): Outer loop unrolled inside inner loop.
  1793: vec( 101): Vectorized loop.
  1800: vec( 126): Idiom detected.: SUM
  1800: opt(1592): Outer loop unrolled inside inner loop.
  1800: vec( 101): Vectorized loop.
  1807: vec( 126): Idiom detected.: SUM
  1807: opt(1592): Outer loop unrolled inside inner loop.
  1807: vec( 101): Vectorized loop.
  1814: vec( 126): Idiom detected.: SUM
  1814: opt(1592): Outer loop unrolled inside inner loop.
  1814: vec( 101): Vectorized loop.
  1821: vec( 126): Idiom detected.: SUM
  1821: opt(1592): Outer loop unrolled inside inner loop.
  1821: vec( 101): Vectorized loop.
  1828: vec( 126): Idiom detected.: SUM
  1828: opt(1592): Outer loop unrolled inside inner loop.
  1828: vec( 101): Vectorized loop.
  1835: vec( 126): Idiom detected.: SUM
  1835: opt(1592): Outer loop unrolled inside inner loop.
  1835: vec( 101): Vectorized loop.
  1842: vec( 126): Idiom detected.: SUM
  1842: opt(1592): Outer loop unrolled inside inner loop.
  1842: vec( 101): Vectorized loop.
  1849: vec( 126): Idiom detected.: SUM
  1849: opt(1592): Outer loop unrolled inside inner loop.
  1849: vec( 101): Vectorized loop.
  1856: vec( 126): Idiom detected.: SUM
  1856: opt(1592): Outer loop unrolled inside inner loop.
  1856: vec( 101): Vectorized loop.
  1863: vec( 126): Idiom detected.: SUM
  1863: opt(1592): Outer loop unrolled inside inner loop.
  1863: vec( 101): Vectorized loop.
  1870: vec( 126): Idiom detected.: SUM
  1870: opt(1592): Outer loop unrolled inside inner loop.
  1870: vec( 101): Vectorized loop.
  1940: inl(1212): Source for routine not found.: MICRO_MG2_0::MICRO_MG_TEND
  1999: inl(1212): Source for routine not found.: KGEN_UTILS_MOD::KGEN_INIT_CHECK
  2004: inl(1214): Expansion routine is too big for automatic expansion.: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM2
  2016: inl(1214): Expansion routine is too big for automatic expansion.: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM1
  2108: inl(1214): Expansion routine is too big for automatic expansion.: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_CHARACTER_128
  2129: vec( 103): Unvectorized loop.
  2129: vec( 110): Vectorization obstructive procedure reference.: MICRO_MG2_0::MICRO_MG_TEND


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK
FORMAT LIST

 LINE   LOOP      STATEMENT

   140:           SUBROUTINE micro_mg_cam_tend_pack(kgen_unit, kgen_measure, kgen_isverified, dtime, nlev, mgncol)
   141:           
   142:           
   143:               USE micro_mg2_0, ONLY: micro_mg_tend2_0 => micro_mg_tend
   144:           
   145:               USE kgen_utils_mod, ONLY: kgen_dp, kgen_array_sumcheck
   146:               USE kgen_utils_mod, ONLY: kgen_perturb_real
   147:               USE micro_mg2_0, ONLY: kr_externs_out_micro_mg2_0
   148:               USE micro_mg_utils, ONLY: kr_externs_out_micro_mg_utils
   149:               USE wv_sat_methods, ONLY: kr_externs_out_wv_sat_methods
   150:               USE kgen_utils_mod, ONLY: check_t, kgen_init_check, kgen_tolerance, kgen_minvalue, CHECK_IDENTICAL, CHECK_IN_TOL, &
   151:               &CHECK_OUT_TOL
   152:           
   153:               REAL(KIND=r8), INTENT(INOUT) :: dtime
   154:           
   155:               INTEGER, INTENT(INOUT) :: nlev
   156:               INTEGER, INTENT(INOUT) :: mgncol
   157:              ! Local variables
   158:           
   159:           
   160:              ! Object that packs columns with clouds/precip.
   161:           
   162:              ! Packed versions of inputs.
   163:           
   164:               REAL(KIND=r8) :: packed_t(mgncol,nlev)
   165:               REAL(KIND=r8) :: packed_q(mgncol,nlev)
   166:               REAL(KIND=r8) :: packed_qc(mgncol,nlev)
   167:               REAL(KIND=r8) :: packed_nc(mgncol,nlev)
   168:               REAL(KIND=r8) :: packed_qi(mgncol,nlev)
   169:               REAL(KIND=r8) :: packed_ni(mgncol,nlev)
   170:               REAL(KIND=r8) :: packed_qr(mgncol,nlev)
   171:               REAL(KIND=r8) :: packed_nr(mgncol,nlev)
   172:               REAL(KIND=r8) :: packed_qs(mgncol,nlev)
   173:               REAL(KIND=r8) :: packed_ns(mgncol,nlev)
   174:           
   175:               REAL(KIND=r8) :: packed_relvar(mgncol,nlev)
   176:               REAL(KIND=r8) :: packed_accre_enhan(mgncol,nlev)
   177:           
   178:               REAL(KIND=r8) :: packed_p(mgncol,nlev)
   179:               REAL(KIND=r8) :: packed_pdel(mgncol,nlev)
   180:           
   181:               REAL(KIND=r8) :: packed_cldn(mgncol,nlev)
   182:               REAL(KIND=r8) :: packed_liqcldf(mgncol,nlev)
   183:               REAL(KIND=r8) :: packed_icecldf(mgncol,nlev)
   184:               REAL(KIND=r8), allocatable :: packed_qsatfac(:,:)
   185:           
   186:               REAL(KIND=r8) :: packed_naai(mgncol,nlev)
   187:               REAL(KIND=r8) :: packed_npccn(mgncol,nlev)
   188:           
   189:               REAL(KIND=r8), allocatable :: packed_rndst(:,:,:)
   190:               REAL(KIND=r8), allocatable :: packed_nacon(:,:,:)
   191:              ! Optional outputs.
   192:           
   193:               REAL(KIND=r8) :: packed_tnd_qsnow(mgncol,nlev)
   194:               REAL(KIND=r8) :: packed_tnd_nsnow(mgncol,nlev)
   195:               REAL(KIND=r8) :: packed_re_ice(mgncol,nlev)
   196:           
   197:               REAL(KIND=r8) :: packed_frzimm(mgncol,nlev)
   198:               REAL(KIND=r8) :: packed_frzcnt(mgncol,nlev)
   199:               REAL(KIND=r8) :: packed_frzdep(mgncol,nlev)
   200:              ! Output field post-processing.
   201:           
   202:              ! Packed versions of outputs.
   203:           
   204:               REAL(KIND=r8), target :: packed_rate1ord_cw2pr_st(mgncol,nlev)
   205:               REAL(KIND=r8), target :: packed_tlat(mgncol,nlev)
   206:               REAL(KIND=r8), target :: packed_qvlat(mgncol,nlev)
   207:               REAL(KIND=r8), target :: packed_qctend(mgncol,nlev)
   208:               REAL(KIND=r8), target :: packed_qitend(mgncol,nlev)
   209:               REAL(KIND=r8), target :: packed_nctend(mgncol,nlev)
   210:               REAL(KIND=r8), target :: packed_nitend(mgncol,nlev)
   211:           
   212:               REAL(KIND=r8), target :: packed_qrtend(mgncol,nlev)
   213:               REAL(KIND=r8), target :: packed_qstend(mgncol,nlev)
   214:               REAL(KIND=r8), target :: packed_nrtend(mgncol,nlev)
   215:               REAL(KIND=r8), target :: packed_nstend(mgncol,nlev)
   216:           
   217:               REAL(KIND=r8), target :: packed_prect(mgncol)
   218:               REAL(KIND=r8), target :: packed_preci(mgncol)
   219:               REAL(KIND=r8), target :: packed_nevapr(mgncol,nlev)
   220:               REAL(KIND=r8), target :: packed_am_evp_st(mgncol,nlev)
   221:               REAL(KIND=r8), target :: packed_evapsnow(mgncol,nlev)
   222:               REAL(KIND=r8), target :: packed_prain(mgncol,nlev)
   223:               REAL(KIND=r8), target :: packed_prodsnow(mgncol,nlev)
   224:               REAL(KIND=r8), target :: packed_cmeout(mgncol,nlev)
   225:               REAL(KIND=r8), target :: packed_qsout(mgncol,nlev)
   226:               REAL(KIND=r8), target :: packed_cflx(mgncol,nlev+1)
   227:               REAL(KIND=r8), target :: packed_iflx(mgncol,nlev+1)
   228:               REAL(KIND=r8), target :: packed_rflx(mgncol,nlev+1)
   229:               REAL(KIND=r8), target :: packed_sflx(mgncol,nlev+1)
   230:               REAL(KIND=r8), target :: packed_qrout(mgncol,nlev)
   231:               REAL(KIND=r8), target :: packed_qcsevap(mgncol,nlev)
   232:               REAL(KIND=r8), target :: packed_qisevap(mgncol,nlev)
   233:               REAL(KIND=r8), target :: packed_qvres(mgncol,nlev)
   234:               REAL(KIND=r8), target :: packed_cmei(mgncol,nlev)
   235:               REAL(KIND=r8), target :: packed_vtrmc(mgncol,nlev)
   236:               REAL(KIND=r8), target :: packed_vtrmi(mgncol,nlev)
   237:               REAL(KIND=r8), target :: packed_qcsedten(mgncol,nlev)
   238:               REAL(KIND=r8), target :: packed_qisedten(mgncol,nlev)
   239:               REAL(KIND=r8), target :: packed_qrsedten(mgncol,nlev)
   240:               REAL(KIND=r8), target :: packed_qssedten(mgncol,nlev)
   241:               REAL(KIND=r8), target :: packed_umr(mgncol,nlev)
   242:               REAL(KIND=r8), target :: packed_ums(mgncol,nlev)
   243:               REAL(KIND=r8), target :: packed_pra(mgncol,nlev)
   244:               REAL(KIND=r8), target :: packed_prc(mgncol,nlev)
   245:               REAL(KIND=r8), target :: packed_mnuccc(mgncol,nlev)
   246:               REAL(KIND=r8), target :: packed_mnucct(mgncol,nlev)
   247:               REAL(KIND=r8), target :: packed_msacwi(mgncol,nlev)
   248:               REAL(KIND=r8), target :: packed_psacws(mgncol,nlev)
   249:               REAL(KIND=r8), target :: packed_bergs(mgncol,nlev)
   250:               REAL(KIND=r8), target :: packed_berg(mgncol,nlev)
   251:               REAL(KIND=r8), target :: packed_melt(mgncol,nlev)
   252:               REAL(KIND=r8), target :: packed_homo(mgncol,nlev)
   253:               REAL(KIND=r8), target :: packed_qcres(mgncol,nlev)
   254:               REAL(KIND=r8), target :: packed_prci(mgncol,nlev)
   255:               REAL(KIND=r8), target :: packed_prai(mgncol,nlev)
   256:               REAL(KIND=r8), target :: packed_qires(mgncol,nlev)
   257:               REAL(KIND=r8), target :: packed_mnuccr(mgncol,nlev)
   258:               REAL(KIND=r8), target :: packed_pracs(mgncol,nlev)
   259:               REAL(KIND=r8), target :: packed_meltsdt(mgncol,nlev)
   260:               REAL(KIND=r8), target :: packed_frzrdt(mgncol,nlev)
   261:               REAL(KIND=r8), target :: packed_mnuccd(mgncol,nlev)
   262:               REAL(KIND=r8), target :: packed_nrout(mgncol,nlev)
   263:               REAL(KIND=r8), target :: packed_nsout(mgncol,nlev)
   264:               REAL(KIND=r8), target :: packed_refl(mgncol,nlev)
   265:               REAL(KIND=r8), target :: packed_arefl(mgncol,nlev)
   266:               REAL(KIND=r8), target :: packed_areflz(mgncol,nlev)
   267:               REAL(KIND=r8), target :: packed_frefl(mgncol,nlev)
   268:               REAL(KIND=r8), target :: packed_csrfl(mgncol,nlev)
   269:               REAL(KIND=r8), target :: packed_acsrfl(mgncol,nlev)
   270:               REAL(KIND=r8), target :: packed_fcsrfl(mgncol,nlev)
   271:               REAL(KIND=r8), target :: packed_rercld(mgncol,nlev)
   272:               REAL(KIND=r8), target :: packed_ncai(mgncol,nlev)
   273:               REAL(KIND=r8), target :: packed_ncal(mgncol,nlev)
   274:               REAL(KIND=r8), target :: packed_qrout2(mgncol,nlev)
   275:               REAL(KIND=r8), target :: packed_qsout2(mgncol,nlev)
   276:               REAL(KIND=r8), target :: packed_nrout2(mgncol,nlev)
   277:               REAL(KIND=r8), target :: packed_nsout2(mgncol,nlev)
   278:               REAL(KIND=r8), target :: packed_freqs(mgncol,nlev)
   279:               REAL(KIND=r8), target :: packed_freqr(mgncol,nlev)
   280:               REAL(KIND=r8), target :: packed_nfice(mgncol,nlev)
   281:               REAL(KIND=r8), target :: packed_prer_evap(mgncol,nlev)
   282:               REAL(KIND=r8), target :: packed_qcrat(mgncol,nlev)
   283:           
   284:               REAL(KIND=r8), target :: packed_rel(mgncol,nlev)
   285:               REAL(KIND=r8), target :: packed_rei(mgncol,nlev)
   286:               REAL(KIND=r8), target :: packed_sadice(mgncol,nlev)
   287:               REAL(KIND=r8), target :: packed_sadsnow(mgncol,nlev)
   288:               REAL(KIND=r8), target :: packed_lambdac(mgncol,nlev)
   289:               REAL(KIND=r8), target :: packed_mu(mgncol,nlev)
   290:               REAL(KIND=r8), target :: packed_des(mgncol,nlev)
   291:               REAL(KIND=r8), target :: packed_dei(mgncol,nlev)
   292:              ! Dummy arrays for cases where we throw away the MG version and
   293:              ! recalculate sizes on the CAM grid to avoid time/subcolumn averaging
   294:              ! issues.
   295:           
   296:               REAL(KIND=r8) :: rel_fn_dum(mgncol,nlev)
   297:               REAL(KIND=r8) :: dsout2_dum(mgncol,nlev)
   298:               REAL(KIND=r8) :: drout_dum(mgncol,nlev)
   299:               REAL(KIND=r8) :: reff_rain_dum(mgncol,nlev)
   300:               REAL(KIND=r8) :: reff_snow_dum(mgncol,nlev)
   301:              ! Heterogeneous-only version of mnuccdo.
   302:           
   303:              ! physics buffer fields for COSP simulator
   304:           
   305:              ! physics buffer fields used with CARMA
   306:           
   307:           
   308:                                                          ! strat. cloud water to precip (1/s)    ! rce 2010/05/01
   309:           
   310:           
   311:             ! variables for heterogeneous freezing
   312:           
   313:           
   314:              ! A local copy of state is used for diagnostic calculations
   315:           
   316:           
   317:              ! Averaging arrays for effective radius and number....
   318:           
   319:           !  Averaging arrays for supercooled liquid
   320:           
   321:           
   322:              ! Cloud fraction used for precipitation.
   323:           
   324:              ! Average cloud top radius & number
   325:           
   326:           
   327:              ! Variables for precip efficiency calculation
   328:           
   329:           
   330:              ! Variables for liquid water path and column condensation
   331:           
   332:           
   333:              ! variables for autoconversion and accretion vertical averages
   334:           
   335:           
   336:            
   337:           
   338:           
   339:               CHARACTER(LEN=128) :: errstring
   340:              ! For rrtmg optics. specified distribution.
   341:           
   342:           
   343:              !-------------------------------------------------------------------------------
   344:               INTEGER, INTENT(IN) :: kgen_unit
   345:               REAL(KIND=kgen_dp), INTENT(OUT) :: kgen_measure
   346:               LOGICAL, INTENT(OUT) :: kgen_isverified
   347:               LOGICAL :: kgen_istrue
   348:               REAL(KIND=8) :: kgen_array_sum
   349:               INTEGER :: kgen_mpirank, kgen_openmptid, kgen_kernelinvoke
   350:               LOGICAL :: kgen_evalstage, kgen_warmupstage, kgen_mainstage
   351:               COMMON / state / kgen_mpirank, kgen_openmptid, kgen_kernelinvoke, kgen_evalstage, kgen_warmupstage, kgen_mainstage
   352:            
   353:               TYPE(check_t) :: check_status
   354:               INTEGER*8 :: kgen_intvar, kgen_start_clock, kgen_stop_clock, kgen_rate_clock
   355:               INTEGER, PARAMETER :: maxiter = 100
   356:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_rate1ord_cw2pr_st
   357:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_tlat
   358:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qvlat
   359:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qctend
   360:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qitend
   361:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nctend
   362:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nitend
   363:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qrtend
   364:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qstend
   365:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nrtend
   366:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nstend
   367:               REAL(KIND=r8), dimension(mgncol) :: kgenref_packed_prect
   368:               REAL(KIND=r8), dimension(mgncol) :: kgenref_packed_preci
   369:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nevapr
   370:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_am_evp_st
   371:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_evapsnow
   372:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_prain
   373:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_prodsnow
   374:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_cmeout
   375:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qsout
   376:               REAL(KIND=r8), dimension(mgncol,nlev+1) :: kgenref_packed_cflx
   377:               REAL(KIND=r8), dimension(mgncol,nlev+1) :: kgenref_packed_iflx
   378:               REAL(KIND=r8), dimension(mgncol,nlev+1) :: kgenref_packed_rflx
   379:               REAL(KIND=r8), dimension(mgncol,nlev+1) :: kgenref_packed_sflx
   380:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qrout
   381:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qcsevap
   382:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qisevap
   383:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qvres
   384:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_cmei
   385:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_vtrmc
   386:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_vtrmi
   387:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qcsedten
   388:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qisedten
   389:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qrsedten
   390:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qssedten
   391:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_umr
   392:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_ums
   393:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_pra
   394:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_prc
   395:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_mnuccc
   396:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_mnucct
   397:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_msacwi
   398:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_psacws
   399:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_bergs
   400:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_berg
   401:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_melt
   402:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_homo
   403:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qcres
   404:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_prci
   405:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_prai
   406:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qires
   407:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_mnuccr
   408:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_pracs
   409:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_meltsdt
   410:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_frzrdt
   411:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_mnuccd
   412:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nrout
   413:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nsout
   414:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_refl
   415:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_arefl
   416:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_areflz
   417:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_frefl
   418:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_csrfl
   419:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_acsrfl
   420:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_fcsrfl
   421:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_rercld
   422:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_ncai
   423:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_ncal
   424:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qrout2
   425:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qsout2
   426:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nrout2
   427:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nsout2
   428:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_freqs
   429:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_freqr
   430:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_nfice
   431:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_prer_evap
   432:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_qcrat
   433:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_rel
   434:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_rei
   435:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_sadice
   436:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_sadsnow
   437:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_lambdac
   438:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_mu
   439:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_des
   440:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_packed_dei
   441:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_rel_fn_dum
   442:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_dsout2_dum
   443:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_drout_dum
   444:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_reff_rain_dum
   445:               REAL(KIND=r8), dimension(mgncol,nlev) :: kgenref_reff_snow_dum
   446:               CHARACTER(LEN=128) :: kgenref_errstring
   447:            
   448:               !local input variables
   449:               READ (UNIT = kgen_unit) kgen_istrue
   450:               IF (kgen_istrue) THEN
   451:                   READ (UNIT = kgen_unit) kgen_array_sum
   452:                   READ (UNIT = kgen_unit) packed_t
   453: V======>          CALL kgen_array_sumcheck("packed_t", kgen_array_sum, DBLE(SUM(packed_t, mask=(packed_t .eq. packed_t))), .TRUE.)
   454:               END IF
   455:               READ (UNIT = kgen_unit) kgen_istrue
   456:               IF (kgen_istrue) THEN
   457:                   READ (UNIT = kgen_unit) kgen_array_sum
   458:                   READ (UNIT = kgen_unit) packed_q
   459: V======>          CALL kgen_array_sumcheck("packed_q", kgen_array_sum, DBLE(SUM(packed_q, mask=(packed_q .eq. packed_q))), .TRUE.)
   460:               END IF
   461:               READ (UNIT = kgen_unit) kgen_istrue
   462:               IF (kgen_istrue) THEN
   463:                   READ (UNIT = kgen_unit) kgen_array_sum
   464:                   READ (UNIT = kgen_unit) packed_qc
   465: V======>          CALL kgen_array_sumcheck("packed_qc", kgen_array_sum, DBLE(SUM(packed_qc, mask=(packed_qc .eq. packed_qc))), .TRUE.)
   466:               END IF
   467:               READ (UNIT = kgen_unit) kgen_istrue
   468:               IF (kgen_istrue) THEN
   469:                   READ (UNIT = kgen_unit) kgen_array_sum
   470:                   READ (UNIT = kgen_unit) packed_nc
   471: V======>          CALL kgen_array_sumcheck("packed_nc", kgen_array_sum, DBLE(SUM(packed_nc, mask=(packed_nc .eq. packed_nc))), .TRUE.)
   472:               END IF
   473:               READ (UNIT = kgen_unit) kgen_istrue
   474:               IF (kgen_istrue) THEN
   475:                   READ (UNIT = kgen_unit) kgen_array_sum
   476:                   READ (UNIT = kgen_unit) packed_qi
   477: V======>          CALL kgen_array_sumcheck("packed_qi", kgen_array_sum, DBLE(SUM(packed_qi, mask=(packed_qi .eq. packed_qi))), .TRUE.)
   478:               END IF
   479:               READ (UNIT = kgen_unit) kgen_istrue
   480:               IF (kgen_istrue) THEN
   481:                   READ (UNIT = kgen_unit) kgen_array_sum
   482:                   READ (UNIT = kgen_unit) packed_ni
   483: V======>          CALL kgen_array_sumcheck("packed_ni", kgen_array_sum, DBLE(SUM(packed_ni, mask=(packed_ni .eq. packed_ni))), .TRUE.)
   484:               END IF
   485:               READ (UNIT = kgen_unit) kgen_istrue
   486:               IF (kgen_istrue) THEN
   487:                   READ (UNIT = kgen_unit) kgen_array_sum
   488:                   READ (UNIT = kgen_unit) packed_qr
   489: V======>          CALL kgen_array_sumcheck("packed_qr", kgen_array_sum, DBLE(SUM(packed_qr, mask=(packed_qr .eq. packed_qr))), .TRUE.)
   490:               END IF
   491:               READ (UNIT = kgen_unit) kgen_istrue
   492:               IF (kgen_istrue) THEN
   493:                   READ (UNIT = kgen_unit) kgen_array_sum
   494:                   READ (UNIT = kgen_unit) packed_nr
   495: V======>          CALL kgen_array_sumcheck("packed_nr", kgen_array_sum, DBLE(SUM(packed_nr, mask=(packed_nr .eq. packed_nr))), .TRUE.)
   496:               END IF
   497:               READ (UNIT = kgen_unit) kgen_istrue
   498:               IF (kgen_istrue) THEN
   499:                   READ (UNIT = kgen_unit) kgen_array_sum
   500:                   READ (UNIT = kgen_unit) packed_qs
   501: V======>          CALL kgen_array_sumcheck("packed_qs", kgen_array_sum, DBLE(SUM(packed_qs, mask=(packed_qs .eq. packed_qs))), .TRUE.)
   502:               END IF
   503:               READ (UNIT = kgen_unit) kgen_istrue
   504:               IF (kgen_istrue) THEN
   505:                   READ (UNIT = kgen_unit) kgen_array_sum
   506:                   READ (UNIT = kgen_unit) packed_ns
   507: V======>          CALL kgen_array_sumcheck("packed_ns", kgen_array_sum, DBLE(SUM(packed_ns, mask=(packed_ns .eq. packed_ns))), .TRUE.)
   508:               END IF
   509:               READ (UNIT = kgen_unit) kgen_istrue
   510:               IF (kgen_istrue) THEN
   511:                   READ (UNIT = kgen_unit) kgen_array_sum
   512:                   READ (UNIT = kgen_unit) packed_relvar
   513: V======>          CALL kgen_array_sumcheck("packed_relvar", kgen_array_sum, DBLE(SUM(packed_relvar, mask=(packed_relvar .eq. &
   514:                   &packed_relvar))), .TRUE.)
   515:               END IF
   516:               READ (UNIT = kgen_unit) kgen_istrue
   517:               IF (kgen_istrue) THEN
   518:                   READ (UNIT = kgen_unit) kgen_array_sum
   519:                   READ (UNIT = kgen_unit) packed_accre_enhan
   520: V======>          CALL kgen_array_sumcheck("packed_accre_enhan", kgen_array_sum, DBLE(SUM(packed_accre_enhan, mask=(packed_accre_enhan .eq. &
   521:                   &packed_accre_enhan))), .TRUE.)
   522:               END IF
   523:               READ (UNIT = kgen_unit) kgen_istrue
   524:               IF (kgen_istrue) THEN
   525:                   READ (UNIT = kgen_unit) kgen_array_sum
   526:                   READ (UNIT = kgen_unit) packed_p
   527: V======>          CALL kgen_array_sumcheck("packed_p", kgen_array_sum, DBLE(SUM(packed_p, mask=(packed_p .eq. packed_p))), .TRUE.)
   528:               END IF
   529:               READ (UNIT = kgen_unit) kgen_istrue
   530:               IF (kgen_istrue) THEN
   531:                   READ (UNIT = kgen_unit) kgen_array_sum
   532:                   READ (UNIT = kgen_unit) packed_pdel
   533: V======>          CALL kgen_array_sumcheck("packed_pdel", kgen_array_sum, DBLE(SUM(packed_pdel, mask=(packed_pdel .eq. packed_pdel))), &
   534:                   &.TRUE.)
   535:               END IF
   536:               READ (UNIT = kgen_unit) kgen_istrue
   537:               IF (kgen_istrue) THEN
   538:                   READ (UNIT = kgen_unit) kgen_array_sum
   539:                   READ (UNIT = kgen_unit) packed_cldn
   540: V======>          CALL kgen_array_sumcheck("packed_cldn", kgen_array_sum, DBLE(SUM(packed_cldn, mask=(packed_cldn .eq. packed_cldn))), &
   541:                   &.TRUE.)
   542:               END IF
   543:               READ (UNIT = kgen_unit) kgen_istrue
   544:               IF (kgen_istrue) THEN
   545:                   READ (UNIT = kgen_unit) kgen_array_sum
   546:                   READ (UNIT = kgen_unit) packed_liqcldf
   547: V======>          CALL kgen_array_sumcheck("packed_liqcldf", kgen_array_sum, DBLE(SUM(packed_liqcldf, mask=(packed_liqcldf .eq. &
   548:                   &packed_liqcldf))), .TRUE.)
   549:               END IF
   550:               READ (UNIT = kgen_unit) kgen_istrue
   551:               IF (kgen_istrue) THEN
   552:                   READ (UNIT = kgen_unit) kgen_array_sum
   553:                   READ (UNIT = kgen_unit) packed_icecldf
   554: V======>          CALL kgen_array_sumcheck("packed_icecldf", kgen_array_sum, DBLE(SUM(packed_icecldf, mask=(packed_icecldf .eq. &
   555:                   &packed_icecldf))), .TRUE.)
   556:               END IF
   557:               CALL kr_micro_mg_cam_tend_pack_real__r8_dim2(packed_qsatfac, kgen_unit, "packed_qsatfac", .FALSE.)
   558:               READ (UNIT = kgen_unit) kgen_istrue
   559:               IF (kgen_istrue) THEN
   560:                   READ (UNIT = kgen_unit) kgen_array_sum
   561:                   READ (UNIT = kgen_unit) packed_naai
   562: V======>          CALL kgen_array_sumcheck("packed_naai", kgen_array_sum, DBLE(SUM(packed_naai, mask=(packed_naai .eq. packed_naai))), &
   563:                   &.TRUE.)
   564:               END IF
   565:               READ (UNIT = kgen_unit) kgen_istrue
   566:               IF (kgen_istrue) THEN
   567:                   READ (UNIT = kgen_unit) kgen_array_sum
   568:                   READ (UNIT = kgen_unit) packed_npccn
   569: V======>          CALL kgen_array_sumcheck("packed_npccn", kgen_array_sum, DBLE(SUM(packed_npccn, mask=(packed_npccn .eq. packed_npccn))), &
   570:                   &.TRUE.)
   571:               END IF
   572:               CALL kr_micro_mg_cam_tend_pack_real__r8_dim3(packed_rndst, kgen_unit, "packed_rndst", .FALSE.)
   573:               CALL kr_micro_mg_cam_tend_pack_real__r8_dim3(packed_nacon, kgen_unit, "packed_nacon", .FALSE.)
   574:               READ (UNIT = kgen_unit) kgen_istrue
   575:               IF (kgen_istrue) THEN
   576:                   READ (UNIT = kgen_unit) kgen_array_sum
   577:                   READ (UNIT = kgen_unit) packed_tnd_qsnow
   578: V======>          CALL kgen_array_sumcheck("packed_tnd_qsnow", kgen_array_sum, DBLE(SUM(packed_tnd_qsnow, mask=(packed_tnd_qsnow .eq. &
   579:                   &packed_tnd_qsnow))), .TRUE.)
   580:               END IF
   581:               READ (UNIT = kgen_unit) kgen_istrue
   582:               IF (kgen_istrue) THEN
   583:                   READ (UNIT = kgen_unit) kgen_array_sum
   584:                   READ (UNIT = kgen_unit) packed_tnd_nsnow
   585: V======>          CALL kgen_array_sumcheck("packed_tnd_nsnow", kgen_array_sum, DBLE(SUM(packed_tnd_nsnow, mask=(packed_tnd_nsnow .eq. &
   586:                   &packed_tnd_nsnow))), .TRUE.)
   587:               END IF
   588:               READ (UNIT = kgen_unit) kgen_istrue
   589:               IF (kgen_istrue) THEN
   590:                   READ (UNIT = kgen_unit) kgen_array_sum
   591:                   READ (UNIT = kgen_unit) packed_re_ice
   592: V======>          CALL kgen_array_sumcheck("packed_re_ice", kgen_array_sum, DBLE(SUM(packed_re_ice, mask=(packed_re_ice .eq. &
   593:                   &packed_re_ice))), .TRUE.)
   594:               END IF
   595:               READ (UNIT = kgen_unit) kgen_istrue
   596:               IF (kgen_istrue) THEN
   597:                   READ (UNIT = kgen_unit) kgen_array_sum
   598:                   READ (UNIT = kgen_unit) packed_frzimm
   599: V======>          CALL kgen_array_sumcheck("packed_frzimm", kgen_array_sum, DBLE(SUM(packed_frzimm, mask=(packed_frzimm .eq. &
   600:                   &packed_frzimm))), .TRUE.)
   601:               END IF
   602:               READ (UNIT = kgen_unit) kgen_istrue
   603:               IF (kgen_istrue) THEN
   604:                   READ (UNIT = kgen_unit) kgen_array_sum
   605:                   READ (UNIT = kgen_unit) packed_frzcnt
   606: V======>          CALL kgen_array_sumcheck("packed_frzcnt", kgen_array_sum, DBLE(SUM(packed_frzcnt, mask=(packed_frzcnt .eq. &
   607:                   &packed_frzcnt))), .TRUE.)
   608:               END IF
   609:               READ (UNIT = kgen_unit) kgen_istrue
   610:               IF (kgen_istrue) THEN
   611:                   READ (UNIT = kgen_unit) kgen_array_sum
   612:                   READ (UNIT = kgen_unit) packed_frzdep
   613: V======>          CALL kgen_array_sumcheck("packed_frzdep", kgen_array_sum, DBLE(SUM(packed_frzdep, mask=(packed_frzdep .eq. &
   614:                   &packed_frzdep))), .TRUE.)
   615:               END IF
   616:               READ (UNIT = kgen_unit) kgen_istrue
   617:               IF (kgen_istrue) THEN
   618:                   READ (UNIT = kgen_unit) kgen_array_sum
   619:                   READ (UNIT = kgen_unit) packed_rate1ord_cw2pr_st
   620: V======>          CALL kgen_array_sumcheck("packed_rate1ord_cw2pr_st", kgen_array_sum, DBLE(SUM(packed_rate1ord_cw2pr_st, &
   621:                   &mask=(packed_rate1ord_cw2pr_st .eq. packed_rate1ord_cw2pr_st))), .TRUE.)
   622:               END IF
   623:               READ (UNIT = kgen_unit) kgen_istrue
   624:               IF (kgen_istrue) THEN
   625:                   READ (UNIT = kgen_unit) kgen_array_sum
   626:                   READ (UNIT = kgen_unit) packed_tlat
   627: V======>          CALL kgen_array_sumcheck("packed_tlat", kgen_array_sum, DBLE(SUM(packed_tlat, mask=(packed_tlat .eq. packed_tlat))), &
   628:                   &.TRUE.)
   629:               END IF
   630:               READ (UNIT = kgen_unit) kgen_istrue
   631:               IF (kgen_istrue) THEN
   632:                   READ (UNIT = kgen_unit) kgen_array_sum
   633:                   READ (UNIT = kgen_unit) packed_qvlat
   634: V======>          CALL kgen_array_sumcheck("packed_qvlat", kgen_array_sum, DBLE(SUM(packed_qvlat, mask=(packed_qvlat .eq. packed_qvlat))), &
   635:                   &.TRUE.)
   636:               END IF
   637:               READ (UNIT = kgen_unit) kgen_istrue
   638:               IF (kgen_istrue) THEN
   639:                   READ (UNIT = kgen_unit) kgen_array_sum
   640:                   READ (UNIT = kgen_unit) packed_qctend
   641: V======>          CALL kgen_array_sumcheck("packed_qctend", kgen_array_sum, DBLE(SUM(packed_qctend, mask=(packed_qctend .eq. &
   642:                   &packed_qctend))), .TRUE.)
   643:               END IF
   644:               READ (UNIT = kgen_unit) kgen_istrue
   645:               IF (kgen_istrue) THEN
   646:                   READ (UNIT = kgen_unit) kgen_array_sum
   647:                   READ (UNIT = kgen_unit) packed_qitend
   648: V======>          CALL kgen_array_sumcheck("packed_qitend", kgen_array_sum, DBLE(SUM(packed_qitend, mask=(packed_qitend .eq. &
   649:                   &packed_qitend))), .TRUE.)
   650:               END IF
   651:               READ (UNIT = kgen_unit) kgen_istrue
   652:               IF (kgen_istrue) THEN
   653:                   READ (UNIT = kgen_unit) kgen_array_sum
   654:                   READ (UNIT = kgen_unit) packed_nctend
   655: V======>          CALL kgen_array_sumcheck("packed_nctend", kgen_array_sum, DBLE(SUM(packed_nctend, mask=(packed_nctend .eq. &
   656:                   &packed_nctend))), .TRUE.)
   657:               END IF
   658:               READ (UNIT = kgen_unit) kgen_istrue
   659:               IF (kgen_istrue) THEN
   660:                   READ (UNIT = kgen_unit) kgen_array_sum
   661:                   READ (UNIT = kgen_unit) packed_nitend
   662: V======>          CALL kgen_array_sumcheck("packed_nitend", kgen_array_sum, DBLE(SUM(packed_nitend, mask=(packed_nitend .eq. &
   663:                   &packed_nitend))), .TRUE.)
   664:               END IF
   665:               READ (UNIT = kgen_unit) kgen_istrue
   666:               IF (kgen_istrue) THEN
   667:                   READ (UNIT = kgen_unit) kgen_array_sum
   668:                   READ (UNIT = kgen_unit) packed_qrtend
   669: V======>          CALL kgen_array_sumcheck("packed_qrtend", kgen_array_sum, DBLE(SUM(packed_qrtend, mask=(packed_qrtend .eq. &
   670:                   &packed_qrtend))), .TRUE.)
   671:               END IF
   672:               READ (UNIT = kgen_unit) kgen_istrue
   673:               IF (kgen_istrue) THEN
   674:                   READ (UNIT = kgen_unit) kgen_array_sum
   675:                   READ (UNIT = kgen_unit) packed_qstend
   676: V======>          CALL kgen_array_sumcheck("packed_qstend", kgen_array_sum, DBLE(SUM(packed_qstend, mask=(packed_qstend .eq. &
   677:                   &packed_qstend))), .TRUE.)
   678:               END IF
   679:               READ (UNIT = kgen_unit) kgen_istrue
   680:               IF (kgen_istrue) THEN
   681:                   READ (UNIT = kgen_unit) kgen_array_sum
   682:                   READ (UNIT = kgen_unit) packed_nrtend
   683: V======>          CALL kgen_array_sumcheck("packed_nrtend", kgen_array_sum, DBLE(SUM(packed_nrtend, mask=(packed_nrtend .eq. &
   684:                   &packed_nrtend))), .TRUE.)
   685:               END IF
   686:               READ (UNIT = kgen_unit) kgen_istrue
   687:               IF (kgen_istrue) THEN
   688:                   READ (UNIT = kgen_unit) kgen_array_sum
   689:                   READ (UNIT = kgen_unit) packed_nstend
   690: V======>          CALL kgen_array_sumcheck("packed_nstend", kgen_array_sum, DBLE(SUM(packed_nstend, mask=(packed_nstend .eq. &
   691:                   &packed_nstend))), .TRUE.)
   692:               END IF
   693:               READ (UNIT = kgen_unit) kgen_istrue
   694:               IF (kgen_istrue) THEN
   695:                   READ (UNIT = kgen_unit) kgen_array_sum
   696:                   READ (UNIT = kgen_unit) packed_prect
   697: V======>          CALL kgen_array_sumcheck("packed_prect", kgen_array_sum, DBLE(SUM(packed_prect, mask=(packed_prect .eq. packed_prect))), &
   698:                   &.TRUE.)
   699:               END IF
   700:               READ (UNIT = kgen_unit) kgen_istrue
   701:               IF (kgen_istrue) THEN
   702:                   READ (UNIT = kgen_unit) kgen_array_sum
   703:                   READ (UNIT = kgen_unit) packed_preci
   704: V======>          CALL kgen_array_sumcheck("packed_preci", kgen_array_sum, DBLE(SUM(packed_preci, mask=(packed_preci .eq. packed_preci))), &
   705:                   &.TRUE.)
   706:               END IF
   707:               READ (UNIT = kgen_unit) kgen_istrue
   708:               IF (kgen_istrue) THEN
   709:                   READ (UNIT = kgen_unit) kgen_array_sum
   710:                   READ (UNIT = kgen_unit) packed_nevapr
   711: V======>          CALL kgen_array_sumcheck("packed_nevapr", kgen_array_sum, DBLE(SUM(packed_nevapr, mask=(packed_nevapr .eq. &
   712:                   &packed_nevapr))), .TRUE.)
   713:               END IF
   714:               READ (UNIT = kgen_unit) kgen_istrue
   715:               IF (kgen_istrue) THEN
   716:                   READ (UNIT = kgen_unit) kgen_array_sum
   717:                   READ (UNIT = kgen_unit) packed_am_evp_st
   718: V======>          CALL kgen_array_sumcheck("packed_am_evp_st", kgen_array_sum, DBLE(SUM(packed_am_evp_st, mask=(packed_am_evp_st .eq. &
   719:                   &packed_am_evp_st))), .TRUE.)
   720:               END IF
   721:               READ (UNIT = kgen_unit) kgen_istrue
   722:               IF (kgen_istrue) THEN
   723:                   READ (UNIT = kgen_unit) kgen_array_sum
   724:                   READ (UNIT = kgen_unit) packed_evapsnow
   725: V======>          CALL kgen_array_sumcheck("packed_evapsnow", kgen_array_sum, DBLE(SUM(packed_evapsnow, mask=(packed_evapsnow .eq. &
   726:                   &packed_evapsnow))), .TRUE.)
   727:               END IF
   728:               READ (UNIT = kgen_unit) kgen_istrue
   729:               IF (kgen_istrue) THEN
   730:                   READ (UNIT = kgen_unit) kgen_array_sum
   731:                   READ (UNIT = kgen_unit) packed_prain
   732: V======>          CALL kgen_array_sumcheck("packed_prain", kgen_array_sum, DBLE(SUM(packed_prain, mask=(packed_prain .eq. packed_prain))), &
   733:                   &.TRUE.)
   734:               END IF
   735:               READ (UNIT = kgen_unit) kgen_istrue
   736:               IF (kgen_istrue) THEN
   737:                   READ (UNIT = kgen_unit) kgen_array_sum
   738:                   READ (UNIT = kgen_unit) packed_prodsnow
   739: V======>          CALL kgen_array_sumcheck("packed_prodsnow", kgen_array_sum, DBLE(SUM(packed_prodsnow, mask=(packed_prodsnow .eq. &
   740:                   &packed_prodsnow))), .TRUE.)
   741:               END IF
   742:               READ (UNIT = kgen_unit) kgen_istrue
   743:               IF (kgen_istrue) THEN
   744:                   READ (UNIT = kgen_unit) kgen_array_sum
   745:                   READ (UNIT = kgen_unit) packed_cmeout
   746: V======>          CALL kgen_array_sumcheck("packed_cmeout", kgen_array_sum, DBLE(SUM(packed_cmeout, mask=(packed_cmeout .eq. &
   747:                   &packed_cmeout))), .TRUE.)
   748:               END IF
   749:               READ (UNIT = kgen_unit) kgen_istrue
   750:               IF (kgen_istrue) THEN
   751:                   READ (UNIT = kgen_unit) kgen_array_sum
   752:                   READ (UNIT = kgen_unit) packed_qsout
   753: V======>          CALL kgen_array_sumcheck("packed_qsout", kgen_array_sum, DBLE(SUM(packed_qsout, mask=(packed_qsout .eq. packed_qsout))), &
   754:                   &.TRUE.)
   755:               END IF
   756:               READ (UNIT = kgen_unit) kgen_istrue
   757:               IF (kgen_istrue) THEN
   758:                   READ (UNIT = kgen_unit) kgen_array_sum
   759:                   READ (UNIT = kgen_unit) packed_cflx
   760: V======>          CALL kgen_array_sumcheck("packed_cflx", kgen_array_sum, DBLE(SUM(packed_cflx, mask=(packed_cflx .eq. packed_cflx))), &
   761:                   &.TRUE.)
   762:               END IF
   763:               READ (UNIT = kgen_unit) kgen_istrue
   764:               IF (kgen_istrue) THEN
   765:                   READ (UNIT = kgen_unit) kgen_array_sum
   766:                   READ (UNIT = kgen_unit) packed_iflx
   767: V======>          CALL kgen_array_sumcheck("packed_iflx", kgen_array_sum, DBLE(SUM(packed_iflx, mask=(packed_iflx .eq. packed_iflx))), &
   768:                   &.TRUE.)
   769:               END IF
   770:               READ (UNIT = kgen_unit) kgen_istrue
   771:               IF (kgen_istrue) THEN
   772:                   READ (UNIT = kgen_unit) kgen_array_sum
   773:                   READ (UNIT = kgen_unit) packed_rflx
   774: V======>          CALL kgen_array_sumcheck("packed_rflx", kgen_array_sum, DBLE(SUM(packed_rflx, mask=(packed_rflx .eq. packed_rflx))), &
   775:                   &.TRUE.)
   776:               END IF
   777:               READ (UNIT = kgen_unit) kgen_istrue
   778:               IF (kgen_istrue) THEN
   779:                   READ (UNIT = kgen_unit) kgen_array_sum
   780:                   READ (UNIT = kgen_unit) packed_sflx
   781: V======>          CALL kgen_array_sumcheck("packed_sflx", kgen_array_sum, DBLE(SUM(packed_sflx, mask=(packed_sflx .eq. packed_sflx))), &
   782:                   &.TRUE.)
   783:               END IF
   784:               READ (UNIT = kgen_unit) kgen_istrue
   785:               IF (kgen_istrue) THEN
   786:                   READ (UNIT = kgen_unit) kgen_array_sum
   787:                   READ (UNIT = kgen_unit) packed_qrout
   788: V======>          CALL kgen_array_sumcheck("packed_qrout", kgen_array_sum, DBLE(SUM(packed_qrout, mask=(packed_qrout .eq. packed_qrout))), &
   789:                   &.TRUE.)
   790:               END IF
   791:               READ (UNIT = kgen_unit) kgen_istrue
   792:               IF (kgen_istrue) THEN
   793:                   READ (UNIT = kgen_unit) kgen_array_sum
   794:                   READ (UNIT = kgen_unit) packed_qcsevap
   795: V======>          CALL kgen_array_sumcheck("packed_qcsevap", kgen_array_sum, DBLE(SUM(packed_qcsevap, mask=(packed_qcsevap .eq. &
   796:                   &packed_qcsevap))), .TRUE.)
   797:               END IF
   798:               READ (UNIT = kgen_unit) kgen_istrue
   799:               IF (kgen_istrue) THEN
   800:                   READ (UNIT = kgen_unit) kgen_array_sum
   801:                   READ (UNIT = kgen_unit) packed_qisevap
   802: V======>          CALL kgen_array_sumcheck("packed_qisevap", kgen_array_sum, DBLE(SUM(packed_qisevap, mask=(packed_qisevap .eq. &
   803:                   &packed_qisevap))), .TRUE.)
   804:               END IF
   805:               READ (UNIT = kgen_unit) kgen_istrue
   806:               IF (kgen_istrue) THEN
   807:                   READ (UNIT = kgen_unit) kgen_array_sum
   808:                   READ (UNIT = kgen_unit) packed_qvres
   809: V======>          CALL kgen_array_sumcheck("packed_qvres", kgen_array_sum, DBLE(SUM(packed_qvres, mask=(packed_qvres .eq. packed_qvres))), &
   810:                   &.TRUE.)
   811:               END IF
   812:               READ (UNIT = kgen_unit) kgen_istrue
   813:               IF (kgen_istrue) THEN
   814:                   READ (UNIT = kgen_unit) kgen_array_sum
   815:                   READ (UNIT = kgen_unit) packed_cmei
   816: V======>          CALL kgen_array_sumcheck("packed_cmei", kgen_array_sum, DBLE(SUM(packed_cmei, mask=(packed_cmei .eq. packed_cmei))), &
   817:                   &.TRUE.)
   818:               END IF
   819:               READ (UNIT = kgen_unit) kgen_istrue
   820:               IF (kgen_istrue) THEN
   821:                   READ (UNIT = kgen_unit) kgen_array_sum
   822:                   READ (UNIT = kgen_unit) packed_vtrmc
   823: V======>          CALL kgen_array_sumcheck("packed_vtrmc", kgen_array_sum, DBLE(SUM(packed_vtrmc, mask=(packed_vtrmc .eq. packed_vtrmc))), &
   824:                   &.TRUE.)
   825:               END IF
   826:               READ (UNIT = kgen_unit) kgen_istrue
   827:               IF (kgen_istrue) THEN
   828:                   READ (UNIT = kgen_unit) kgen_array_sum
   829:                   READ (UNIT = kgen_unit) packed_vtrmi
   830: V======>          CALL kgen_array_sumcheck("packed_vtrmi", kgen_array_sum, DBLE(SUM(packed_vtrmi, mask=(packed_vtrmi .eq. packed_vtrmi))), &
   831:                   &.TRUE.)
   832:               END IF
   833:               READ (UNIT = kgen_unit) kgen_istrue
   834:               IF (kgen_istrue) THEN
   835:                   READ (UNIT = kgen_unit) kgen_array_sum
   836:                   READ (UNIT = kgen_unit) packed_qcsedten
   837: V======>          CALL kgen_array_sumcheck("packed_qcsedten", kgen_array_sum, DBLE(SUM(packed_qcsedten, mask=(packed_qcsedten .eq. &
   838:                   &packed_qcsedten))), .TRUE.)
   839:               END IF
   840:               READ (UNIT = kgen_unit) kgen_istrue
   841:               IF (kgen_istrue) THEN
   842:                   READ (UNIT = kgen_unit) kgen_array_sum
   843:                   READ (UNIT = kgen_unit) packed_qisedten
   844: V======>          CALL kgen_array_sumcheck("packed_qisedten", kgen_array_sum, DBLE(SUM(packed_qisedten, mask=(packed_qisedten .eq. &
   845:                   &packed_qisedten))), .TRUE.)
   846:               END IF
   847:               READ (UNIT = kgen_unit) kgen_istrue
   848:               IF (kgen_istrue) THEN
   849:                   READ (UNIT = kgen_unit) kgen_array_sum
   850:                   READ (UNIT = kgen_unit) packed_qrsedten
   851: V======>          CALL kgen_array_sumcheck("packed_qrsedten", kgen_array_sum, DBLE(SUM(packed_qrsedten, mask=(packed_qrsedten .eq. &
   852:                   &packed_qrsedten))), .TRUE.)
   853:               END IF
   854:               READ (UNIT = kgen_unit) kgen_istrue
   855:               IF (kgen_istrue) THEN
   856:                   READ (UNIT = kgen_unit) kgen_array_sum
   857:                   READ (UNIT = kgen_unit) packed_qssedten
   858: V======>          CALL kgen_array_sumcheck("packed_qssedten", kgen_array_sum, DBLE(SUM(packed_qssedten, mask=(packed_qssedten .eq. &
   859:                   &packed_qssedten))), .TRUE.)
   860:               END IF
   861:               READ (UNIT = kgen_unit) kgen_istrue
   862:               IF (kgen_istrue) THEN
   863:                   READ (UNIT = kgen_unit) kgen_array_sum
   864:                   READ (UNIT = kgen_unit) packed_umr
   865: V======>          CALL kgen_array_sumcheck("packed_umr", kgen_array_sum, DBLE(SUM(packed_umr, mask=(packed_umr .eq. packed_umr))), .TRUE.)
   866:               END IF
   867:               READ (UNIT = kgen_unit) kgen_istrue
   868:               IF (kgen_istrue) THEN
   869:                   READ (UNIT = kgen_unit) kgen_array_sum
   870:                   READ (UNIT = kgen_unit) packed_ums
   871: V======>          CALL kgen_array_sumcheck("packed_ums", kgen_array_sum, DBLE(SUM(packed_ums, mask=(packed_ums .eq. packed_ums))), .TRUE.)
   872:               END IF
   873:               READ (UNIT = kgen_unit) kgen_istrue
   874:               IF (kgen_istrue) THEN
   875:                   READ (UNIT = kgen_unit) kgen_array_sum
   876:                   READ (UNIT = kgen_unit) packed_pra
   877: V======>          CALL kgen_array_sumcheck("packed_pra", kgen_array_sum, DBLE(SUM(packed_pra, mask=(packed_pra .eq. packed_pra))), .TRUE.)
   878:               END IF
   879:               READ (UNIT = kgen_unit) kgen_istrue
   880:               IF (kgen_istrue) THEN
   881:                   READ (UNIT = kgen_unit) kgen_array_sum
   882:                   READ (UNIT = kgen_unit) packed_prc
   883: V======>          CALL kgen_array_sumcheck("packed_prc", kgen_array_sum, DBLE(SUM(packed_prc, mask=(packed_prc .eq. packed_prc))), .TRUE.)
   884:               END IF
   885:               READ (UNIT = kgen_unit) kgen_istrue
   886:               IF (kgen_istrue) THEN
   887:                   READ (UNIT = kgen_unit) kgen_array_sum
   888:                   READ (UNIT = kgen_unit) packed_mnuccc
   889: V======>          CALL kgen_array_sumcheck("packed_mnuccc", kgen_array_sum, DBLE(SUM(packed_mnuccc, mask=(packed_mnuccc .eq. &
   890:                   &packed_mnuccc))), .TRUE.)
   891:               END IF
   892:               READ (UNIT = kgen_unit) kgen_istrue
   893:               IF (kgen_istrue) THEN
   894:                   READ (UNIT = kgen_unit) kgen_array_sum
   895:                   READ (UNIT = kgen_unit) packed_mnucct
   896: V======>          CALL kgen_array_sumcheck("packed_mnucct", kgen_array_sum, DBLE(SUM(packed_mnucct, mask=(packed_mnucct .eq. &
   897:                   &packed_mnucct))), .TRUE.)
   898:               END IF
   899:               READ (UNIT = kgen_unit) kgen_istrue
   900:               IF (kgen_istrue) THEN
   901:                   READ (UNIT = kgen_unit) kgen_array_sum
   902:                   READ (UNIT = kgen_unit) packed_msacwi
   903: V======>          CALL kgen_array_sumcheck("packed_msacwi", kgen_array_sum, DBLE(SUM(packed_msacwi, mask=(packed_msacwi .eq. &
   904:                   &packed_msacwi))), .TRUE.)
   905:               END IF
   906:               READ (UNIT = kgen_unit) kgen_istrue
   907:               IF (kgen_istrue) THEN
   908:                   READ (UNIT = kgen_unit) kgen_array_sum
   909:                   READ (UNIT = kgen_unit) packed_psacws
   910: V======>          CALL kgen_array_sumcheck("packed_psacws", kgen_array_sum, DBLE(SUM(packed_psacws, mask=(packed_psacws .eq. &
   911:                   &packed_psacws))), .TRUE.)
   912:               END IF
   913:               READ (UNIT = kgen_unit) kgen_istrue
   914:               IF (kgen_istrue) THEN
   915:                   READ (UNIT = kgen_unit) kgen_array_sum
   916:                   READ (UNIT = kgen_unit) packed_bergs
   917: V======>          CALL kgen_array_sumcheck("packed_bergs", kgen_array_sum, DBLE(SUM(packed_bergs, mask=(packed_bergs .eq. packed_bergs))), &
   918:                   &.TRUE.)
   919:               END IF
   920:               READ (UNIT = kgen_unit) kgen_istrue
   921:               IF (kgen_istrue) THEN
   922:                   READ (UNIT = kgen_unit) kgen_array_sum
   923:                   READ (UNIT = kgen_unit) packed_berg
   924: V======>          CALL kgen_array_sumcheck("packed_berg", kgen_array_sum, DBLE(SUM(packed_berg, mask=(packed_berg .eq. packed_berg))), &
   925:                   &.TRUE.)
   926:               END IF
   927:               READ (UNIT = kgen_unit) kgen_istrue
   928:               IF (kgen_istrue) THEN
   929:                   READ (UNIT = kgen_unit) kgen_array_sum
   930:                   READ (UNIT = kgen_unit) packed_melt
   931: V======>          CALL kgen_array_sumcheck("packed_melt", kgen_array_sum, DBLE(SUM(packed_melt, mask=(packed_melt .eq. packed_melt))), &
   932:                   &.TRUE.)
   933:               END IF
   934:               READ (UNIT = kgen_unit) kgen_istrue
   935:               IF (kgen_istrue) THEN
   936:                   READ (UNIT = kgen_unit) kgen_array_sum
   937:                   READ (UNIT = kgen_unit) packed_homo
   938: V======>          CALL kgen_array_sumcheck("packed_homo", kgen_array_sum, DBLE(SUM(packed_homo, mask=(packed_homo .eq. packed_homo))), &
   939:                   &.TRUE.)
   940:               END IF
   941:               READ (UNIT = kgen_unit) kgen_istrue
   942:               IF (kgen_istrue) THEN
   943:                   READ (UNIT = kgen_unit) kgen_array_sum
   944:                   READ (UNIT = kgen_unit) packed_qcres
   945: V======>          CALL kgen_array_sumcheck("packed_qcres", kgen_array_sum, DBLE(SUM(packed_qcres, mask=(packed_qcres .eq. packed_qcres))), &
   946:                   &.TRUE.)
   947:               END IF
   948:               READ (UNIT = kgen_unit) kgen_istrue
   949:               IF (kgen_istrue) THEN
   950:                   READ (UNIT = kgen_unit) kgen_array_sum
   951:                   READ (UNIT = kgen_unit) packed_prci
   952: V======>          CALL kgen_array_sumcheck("packed_prci", kgen_array_sum, DBLE(SUM(packed_prci, mask=(packed_prci .eq. packed_prci))), &
   953:                   &.TRUE.)
   954:               END IF
   955:               READ (UNIT = kgen_unit) kgen_istrue
   956:               IF (kgen_istrue) THEN
   957:                   READ (UNIT = kgen_unit) kgen_array_sum
   958:                   READ (UNIT = kgen_unit) packed_prai
   959: V======>          CALL kgen_array_sumcheck("packed_prai", kgen_array_sum, DBLE(SUM(packed_prai, mask=(packed_prai .eq. packed_prai))), &
   960:                   &.TRUE.)
   961:               END IF
   962:               READ (UNIT = kgen_unit) kgen_istrue
   963:               IF (kgen_istrue) THEN
   964:                   READ (UNIT = kgen_unit) kgen_array_sum
   965:                   READ (UNIT = kgen_unit) packed_qires
   966: V======>          CALL kgen_array_sumcheck("packed_qires", kgen_array_sum, DBLE(SUM(packed_qires, mask=(packed_qires .eq. packed_qires))), &
   967:                   &.TRUE.)
   968:               END IF
   969:               READ (UNIT = kgen_unit) kgen_istrue
   970:               IF (kgen_istrue) THEN
   971:                   READ (UNIT = kgen_unit) kgen_array_sum
   972:                   READ (UNIT = kgen_unit) packed_mnuccr
   973: V======>          CALL kgen_array_sumcheck("packed_mnuccr", kgen_array_sum, DBLE(SUM(packed_mnuccr, mask=(packed_mnuccr .eq. &
   974:                   &packed_mnuccr))), .TRUE.)
   975:               END IF
   976:               READ (UNIT = kgen_unit) kgen_istrue
   977:               IF (kgen_istrue) THEN
   978:                   READ (UNIT = kgen_unit) kgen_array_sum
   979:                   READ (UNIT = kgen_unit) packed_pracs
   980: V======>          CALL kgen_array_sumcheck("packed_pracs", kgen_array_sum, DBLE(SUM(packed_pracs, mask=(packed_pracs .eq. packed_pracs))), &
   981:                   &.TRUE.)
   982:               END IF
   983:               READ (UNIT = kgen_unit) kgen_istrue
   984:               IF (kgen_istrue) THEN
   985:                   READ (UNIT = kgen_unit) kgen_array_sum
   986:                   READ (UNIT = kgen_unit) packed_meltsdt
   987: V======>          CALL kgen_array_sumcheck("packed_meltsdt", kgen_array_sum, DBLE(SUM(packed_meltsdt, mask=(packed_meltsdt .eq. &
   988:                   &packed_meltsdt))), .TRUE.)
   989:               END IF
   990:               READ (UNIT = kgen_unit) kgen_istrue
   991:               IF (kgen_istrue) THEN
   992:                   READ (UNIT = kgen_unit) kgen_array_sum
   993:                   READ (UNIT = kgen_unit) packed_frzrdt
   994: V======>          CALL kgen_array_sumcheck("packed_frzrdt", kgen_array_sum, DBLE(SUM(packed_frzrdt, mask=(packed_frzrdt .eq. &
   995:                   &packed_frzrdt))), .TRUE.)
   996:               END IF
   997:               READ (UNIT = kgen_unit) kgen_istrue
   998:               IF (kgen_istrue) THEN
   999:                   READ (UNIT = kgen_unit) kgen_array_sum
  1000:                   READ (UNIT = kgen_unit) packed_mnuccd
  1001: V======>          CALL kgen_array_sumcheck("packed_mnuccd", kgen_array_sum, DBLE(SUM(packed_mnuccd, mask=(packed_mnuccd .eq. &
  1002:                   &packed_mnuccd))), .TRUE.)
  1003:               END IF
  1004:               READ (UNIT = kgen_unit) kgen_istrue
  1005:               IF (kgen_istrue) THEN
  1006:                   READ (UNIT = kgen_unit) kgen_array_sum
  1007:                   READ (UNIT = kgen_unit) packed_nrout
  1008: V======>          CALL kgen_array_sumcheck("packed_nrout", kgen_array_sum, DBLE(SUM(packed_nrout, mask=(packed_nrout .eq. packed_nrout))), &
  1009:                   &.TRUE.)
  1010:               END IF
  1011:               READ (UNIT = kgen_unit) kgen_istrue
  1012:               IF (kgen_istrue) THEN
  1013:                   READ (UNIT = kgen_unit) kgen_array_sum
  1014:                   READ (UNIT = kgen_unit) packed_nsout
  1015: V======>          CALL kgen_array_sumcheck("packed_nsout", kgen_array_sum, DBLE(SUM(packed_nsout, mask=(packed_nsout .eq. packed_nsout))), &
  1016:                   &.TRUE.)
  1017:               END IF
  1018:               READ (UNIT = kgen_unit) kgen_istrue
  1019:               IF (kgen_istrue) THEN
  1020:                   READ (UNIT = kgen_unit) kgen_array_sum
  1021:                   READ (UNIT = kgen_unit) packed_refl
  1022: V======>          CALL kgen_array_sumcheck("packed_refl", kgen_array_sum, DBLE(SUM(packed_refl, mask=(packed_refl .eq. packed_refl))), &
  1023:                   &.TRUE.)
  1024:               END IF
  1025:               READ (UNIT = kgen_unit) kgen_istrue
  1026:               IF (kgen_istrue) THEN
  1027:                   READ (UNIT = kgen_unit) kgen_array_sum
  1028:                   READ (UNIT = kgen_unit) packed_arefl
  1029: V======>          CALL kgen_array_sumcheck("packed_arefl", kgen_array_sum, DBLE(SUM(packed_arefl, mask=(packed_arefl .eq. packed_arefl))), &
  1030:                   &.TRUE.)
  1031:               END IF
  1032:               READ (UNIT = kgen_unit) kgen_istrue
  1033:               IF (kgen_istrue) THEN
  1034:                   READ (UNIT = kgen_unit) kgen_array_sum
  1035:                   READ (UNIT = kgen_unit) packed_areflz
  1036: V======>          CALL kgen_array_sumcheck("packed_areflz", kgen_array_sum, DBLE(SUM(packed_areflz, mask=(packed_areflz .eq. &
  1037:                   &packed_areflz))), .TRUE.)
  1038:               END IF
  1039:               READ (UNIT = kgen_unit) kgen_istrue
  1040:               IF (kgen_istrue) THEN
  1041:                   READ (UNIT = kgen_unit) kgen_array_sum
  1042:                   READ (UNIT = kgen_unit) packed_frefl
  1043: V======>          CALL kgen_array_sumcheck("packed_frefl", kgen_array_sum, DBLE(SUM(packed_frefl, mask=(packed_frefl .eq. packed_frefl))), &
  1044:                   &.TRUE.)
  1045:               END IF
  1046:               READ (UNIT = kgen_unit) kgen_istrue
  1047:               IF (kgen_istrue) THEN
  1048:                   READ (UNIT = kgen_unit) kgen_array_sum
  1049:                   READ (UNIT = kgen_unit) packed_csrfl
  1050: V======>          CALL kgen_array_sumcheck("packed_csrfl", kgen_array_sum, DBLE(SUM(packed_csrfl, mask=(packed_csrfl .eq. packed_csrfl))), &
  1051:                   &.TRUE.)
  1052:               END IF
  1053:               READ (UNIT = kgen_unit) kgen_istrue
  1054:               IF (kgen_istrue) THEN
  1055:                   READ (UNIT = kgen_unit) kgen_array_sum
  1056:                   READ (UNIT = kgen_unit) packed_acsrfl
  1057: V======>          CALL kgen_array_sumcheck("packed_acsrfl", kgen_array_sum, DBLE(SUM(packed_acsrfl, mask=(packed_acsrfl .eq. &
  1058:                   &packed_acsrfl))), .TRUE.)
  1059:               END IF
  1060:               READ (UNIT = kgen_unit) kgen_istrue
  1061:               IF (kgen_istrue) THEN
  1062:                   READ (UNIT = kgen_unit) kgen_array_sum
  1063:                   READ (UNIT = kgen_unit) packed_fcsrfl
  1064: V======>          CALL kgen_array_sumcheck("packed_fcsrfl", kgen_array_sum, DBLE(SUM(packed_fcsrfl, mask=(packed_fcsrfl .eq. &
  1065:                   &packed_fcsrfl))), .TRUE.)
  1066:               END IF
  1067:               READ (UNIT = kgen_unit) kgen_istrue
  1068:               IF (kgen_istrue) THEN
  1069:                   READ (UNIT = kgen_unit) kgen_array_sum
  1070:                   READ (UNIT = kgen_unit) packed_rercld
  1071: V======>          CALL kgen_array_sumcheck("packed_rercld", kgen_array_sum, DBLE(SUM(packed_rercld, mask=(packed_rercld .eq. &
  1072:                   &packed_rercld))), .TRUE.)
  1073:               END IF
  1074:               READ (UNIT = kgen_unit) kgen_istrue
  1075:               IF (kgen_istrue) THEN
  1076:                   READ (UNIT = kgen_unit) kgen_array_sum
  1077:                   READ (UNIT = kgen_unit) packed_ncai
  1078: V======>          CALL kgen_array_sumcheck("packed_ncai", kgen_array_sum, DBLE(SUM(packed_ncai, mask=(packed_ncai .eq. packed_ncai))), &
  1079:                   &.TRUE.)
  1080:               END IF
  1081:               READ (UNIT = kgen_unit) kgen_istrue
  1082:               IF (kgen_istrue) THEN
  1083:                   READ (UNIT = kgen_unit) kgen_array_sum
  1084:                   READ (UNIT = kgen_unit) packed_ncal
  1085: V======>          CALL kgen_array_sumcheck("packed_ncal", kgen_array_sum, DBLE(SUM(packed_ncal, mask=(packed_ncal .eq. packed_ncal))), &
  1086:                   &.TRUE.)
  1087:               END IF
  1088:               READ (UNIT = kgen_unit) kgen_istrue
  1089:               IF (kgen_istrue) THEN
  1090:                   READ (UNIT = kgen_unit) kgen_array_sum
  1091:                   READ (UNIT = kgen_unit) packed_qrout2
  1092: V======>          CALL kgen_array_sumcheck("packed_qrout2", kgen_array_sum, DBLE(SUM(packed_qrout2, mask=(packed_qrout2 .eq. &
  1093:                   &packed_qrout2))), .TRUE.)
  1094:               END IF
  1095:               READ (UNIT = kgen_unit) kgen_istrue
  1096:               IF (kgen_istrue) THEN
  1097:                   READ (UNIT = kgen_unit) kgen_array_sum
  1098:                   READ (UNIT = kgen_unit) packed_qsout2
  1099: V======>          CALL kgen_array_sumcheck("packed_qsout2", kgen_array_sum, DBLE(SUM(packed_qsout2, mask=(packed_qsout2 .eq. &
  1100:                   &packed_qsout2))), .TRUE.)
  1101:               END IF
  1102:               READ (UNIT = kgen_unit) kgen_istrue
  1103:               IF (kgen_istrue) THEN
  1104:                   READ (UNIT = kgen_unit) kgen_array_sum
  1105:                   READ (UNIT = kgen_unit) packed_nrout2
  1106: V======>          CALL kgen_array_sumcheck("packed_nrout2", kgen_array_sum, DBLE(SUM(packed_nrout2, mask=(packed_nrout2 .eq. &
  1107:                   &packed_nrout2))), .TRUE.)
  1108:               END IF
  1109:               READ (UNIT = kgen_unit) kgen_istrue
  1110:               IF (kgen_istrue) THEN
  1111:                   READ (UNIT = kgen_unit) kgen_array_sum
  1112:                   READ (UNIT = kgen_unit) packed_nsout2
  1113: V======>          CALL kgen_array_sumcheck("packed_nsout2", kgen_array_sum, DBLE(SUM(packed_nsout2, mask=(packed_nsout2 .eq. &
  1114:                   &packed_nsout2))), .TRUE.)
  1115:               END IF
  1116:               READ (UNIT = kgen_unit) kgen_istrue
  1117:               IF (kgen_istrue) THEN
  1118:                   READ (UNIT = kgen_unit) kgen_array_sum
  1119:                   READ (UNIT = kgen_unit) packed_freqs
  1120: V======>          CALL kgen_array_sumcheck("packed_freqs", kgen_array_sum, DBLE(SUM(packed_freqs, mask=(packed_freqs .eq. packed_freqs))), &
  1121:                   &.TRUE.)
  1122:               END IF
  1123:               READ (UNIT = kgen_unit) kgen_istrue
  1124:               IF (kgen_istrue) THEN
  1125:                   READ (UNIT = kgen_unit) kgen_array_sum
  1126:                   READ (UNIT = kgen_unit) packed_freqr
  1127: V======>          CALL kgen_array_sumcheck("packed_freqr", kgen_array_sum, DBLE(SUM(packed_freqr, mask=(packed_freqr .eq. packed_freqr))), &
  1128:                   &.TRUE.)
  1129:               END IF
  1130:               READ (UNIT = kgen_unit) kgen_istrue
  1131:               IF (kgen_istrue) THEN
  1132:                   READ (UNIT = kgen_unit) kgen_array_sum
  1133:                   READ (UNIT = kgen_unit) packed_nfice
  1134: V======>          CALL kgen_array_sumcheck("packed_nfice", kgen_array_sum, DBLE(SUM(packed_nfice, mask=(packed_nfice .eq. packed_nfice))), &
  1135:                   &.TRUE.)
  1136:               END IF
  1137:               READ (UNIT = kgen_unit) kgen_istrue
  1138:               IF (kgen_istrue) THEN
  1139:                   READ (UNIT = kgen_unit) kgen_array_sum
  1140:                   READ (UNIT = kgen_unit) packed_prer_evap
  1141: V======>          CALL kgen_array_sumcheck("packed_prer_evap", kgen_array_sum, DBLE(SUM(packed_prer_evap, mask=(packed_prer_evap .eq. &
  1142:                   &packed_prer_evap))), .TRUE.)
  1143:               END IF
  1144:               READ (UNIT = kgen_unit) kgen_istrue
  1145:               IF (kgen_istrue) THEN
  1146:                   READ (UNIT = kgen_unit) kgen_array_sum
  1147:                   READ (UNIT = kgen_unit) packed_qcrat
  1148: V======>          CALL kgen_array_sumcheck("packed_qcrat", kgen_array_sum, DBLE(SUM(packed_qcrat, mask=(packed_qcrat .eq. packed_qcrat))), &
  1149:                   &.TRUE.)
  1150:               END IF
  1151:               READ (UNIT = kgen_unit) kgen_istrue
  1152:               IF (kgen_istrue) THEN
  1153:                   READ (UNIT = kgen_unit) kgen_array_sum
  1154:                   READ (UNIT = kgen_unit) packed_rel
  1155: V======>          CALL kgen_array_sumcheck("packed_rel", kgen_array_sum, DBLE(SUM(packed_rel, mask=(packed_rel .eq. packed_rel))), .TRUE.)
  1156:               END IF
  1157:               READ (UNIT = kgen_unit) kgen_istrue
  1158:               IF (kgen_istrue) THEN
  1159:                   READ (UNIT = kgen_unit) kgen_array_sum
  1160:                   READ (UNIT = kgen_unit) packed_rei
  1161: V======>          CALL kgen_array_sumcheck("packed_rei", kgen_array_sum, DBLE(SUM(packed_rei, mask=(packed_rei .eq. packed_rei))), .TRUE.)
  1162:               END IF
  1163:               READ (UNIT = kgen_unit) kgen_istrue
  1164:               IF (kgen_istrue) THEN
  1165:                   READ (UNIT = kgen_unit) kgen_array_sum
  1166:                   READ (UNIT = kgen_unit) packed_sadice
  1167: V======>          CALL kgen_array_sumcheck("packed_sadice", kgen_array_sum, DBLE(SUM(packed_sadice, mask=(packed_sadice .eq. &
  1168:                   &packed_sadice))), .TRUE.)
  1169:               END IF
  1170:               READ (UNIT = kgen_unit) kgen_istrue
  1171:               IF (kgen_istrue) THEN
  1172:                   READ (UNIT = kgen_unit) kgen_array_sum
  1173:                   READ (UNIT = kgen_unit) packed_sadsnow
  1174: V======>          CALL kgen_array_sumcheck("packed_sadsnow", kgen_array_sum, DBLE(SUM(packed_sadsnow, mask=(packed_sadsnow .eq. &
  1175:                   &packed_sadsnow))), .TRUE.)
  1176:               END IF
  1177:               READ (UNIT = kgen_unit) kgen_istrue
  1178:               IF (kgen_istrue) THEN
  1179:                   READ (UNIT = kgen_unit) kgen_array_sum
  1180:                   READ (UNIT = kgen_unit) packed_lambdac
  1181: V======>          CALL kgen_array_sumcheck("packed_lambdac", kgen_array_sum, DBLE(SUM(packed_lambdac, mask=(packed_lambdac .eq. &
  1182:                   &packed_lambdac))), .TRUE.)
  1183:               END IF
  1184:               READ (UNIT = kgen_unit) kgen_istrue
  1185:               IF (kgen_istrue) THEN
  1186:                   READ (UNIT = kgen_unit) kgen_array_sum
  1187:                   READ (UNIT = kgen_unit) packed_mu
  1188: V======>          CALL kgen_array_sumcheck("packed_mu", kgen_array_sum, DBLE(SUM(packed_mu, mask=(packed_mu .eq. packed_mu))), .TRUE.)
  1189:               END IF
  1190:               READ (UNIT = kgen_unit) kgen_istrue
  1191:               IF (kgen_istrue) THEN
  1192:                   READ (UNIT = kgen_unit) kgen_array_sum
  1193:                   READ (UNIT = kgen_unit) packed_des
  1194: V======>          CALL kgen_array_sumcheck("packed_des", kgen_array_sum, DBLE(SUM(packed_des, mask=(packed_des .eq. packed_des))), .TRUE.)
  1195:               END IF
  1196:               READ (UNIT = kgen_unit) kgen_istrue
  1197:               IF (kgen_istrue) THEN
  1198:                   READ (UNIT = kgen_unit) kgen_array_sum
  1199:                   READ (UNIT = kgen_unit) packed_dei
  1200: V======>          CALL kgen_array_sumcheck("packed_dei", kgen_array_sum, DBLE(SUM(packed_dei, mask=(packed_dei .eq. packed_dei))), .TRUE.)
  1201:               END IF
  1202:               READ (UNIT = kgen_unit) kgen_istrue
  1203:               IF (kgen_istrue) THEN
  1204:                   READ (UNIT = kgen_unit) kgen_array_sum
  1205:                   READ (UNIT = kgen_unit) rel_fn_dum
  1206: V======>          CALL kgen_array_sumcheck("rel_fn_dum", kgen_array_sum, DBLE(SUM(rel_fn_dum, mask=(rel_fn_dum .eq. rel_fn_dum))), .TRUE.)
  1207:               END IF
  1208:               READ (UNIT = kgen_unit) kgen_istrue
  1209:               IF (kgen_istrue) THEN
  1210:                   READ (UNIT = kgen_unit) kgen_array_sum
  1211:                   READ (UNIT = kgen_unit) dsout2_dum
  1212: V======>          CALL kgen_array_sumcheck("dsout2_dum", kgen_array_sum, DBLE(SUM(dsout2_dum, mask=(dsout2_dum .eq. dsout2_dum))), .TRUE.)
  1213:               END IF
  1214:               READ (UNIT = kgen_unit) kgen_istrue
  1215:               IF (kgen_istrue) THEN
  1216:                   READ (UNIT = kgen_unit) kgen_array_sum
  1217:                   READ (UNIT = kgen_unit) drout_dum
  1218: V======>          CALL kgen_array_sumcheck("drout_dum", kgen_array_sum, DBLE(SUM(drout_dum, mask=(drout_dum .eq. drout_dum))), .TRUE.)
  1219:               END IF
  1220:               READ (UNIT = kgen_unit) kgen_istrue
  1221:               IF (kgen_istrue) THEN
  1222:                   READ (UNIT = kgen_unit) kgen_array_sum
  1223:                   READ (UNIT = kgen_unit) reff_rain_dum
  1224: V======>          CALL kgen_array_sumcheck("reff_rain_dum", kgen_array_sum, DBLE(SUM(reff_rain_dum, mask=(reff_rain_dum .eq. &
  1225:                   &reff_rain_dum))), .TRUE.)
  1226:               END IF
  1227:               READ (UNIT = kgen_unit) kgen_istrue
  1228:               IF (kgen_istrue) THEN
  1229:                   READ (UNIT = kgen_unit) kgen_array_sum
  1230:                   READ (UNIT = kgen_unit) reff_snow_dum
  1231: V======>          CALL kgen_array_sumcheck("reff_snow_dum", kgen_array_sum, DBLE(SUM(reff_snow_dum, mask=(reff_snow_dum .eq. &
  1232:                   &reff_snow_dum))), .TRUE.)
  1233:               END IF
  1234:               READ (UNIT = kgen_unit) errstring
  1235:            
  1236:               !extern output variables
  1237:         I     CALL kr_externs_out_micro_mg_cam(kgen_unit)
  1238:               CALL kr_externs_out_micro_mg2_0(kgen_unit)
  1239:               CALL kr_externs_out_micro_mg_utils(kgen_unit)
  1240:               CALL kr_externs_out_wv_sat_methods(kgen_unit)
  1241:            
  1242:               !local output variables
  1243:               READ (UNIT = kgen_unit) kgen_istrue
  1244:               IF (kgen_istrue) THEN
  1245:                   READ (UNIT = kgen_unit) kgen_array_sum
  1246:                   READ (UNIT = kgen_unit) kgenref_packed_rate1ord_cw2pr_st
  1247: V======>          CALL kgen_array_sumcheck("kgenref_packed_rate1ord_cw2pr_st", kgen_array_sum, DBLE(SUM(kgenref_packed_rate1ord_cw2pr_st, &
  1248:                   &mask=(kgenref_packed_rate1ord_cw2pr_st .eq. kgenref_packed_rate1ord_cw2pr_st))), .TRUE.)
  1249:               END IF
  1250:               READ (UNIT = kgen_unit) kgen_istrue
  1251:               IF (kgen_istrue) THEN
  1252:                   READ (UNIT = kgen_unit) kgen_array_sum
  1253:                   READ (UNIT = kgen_unit) kgenref_packed_tlat
  1254: V======>          CALL kgen_array_sumcheck("kgenref_packed_tlat", kgen_array_sum, DBLE(SUM(kgenref_packed_tlat, mask=(kgenref_packed_tlat &
  1255:                   &.eq. kgenref_packed_tlat))), .TRUE.)
  1256:               END IF
  1257:               READ (UNIT = kgen_unit) kgen_istrue
  1258:               IF (kgen_istrue) THEN
  1259:                   READ (UNIT = kgen_unit) kgen_array_sum
  1260:                   READ (UNIT = kgen_unit) kgenref_packed_qvlat
  1261: V======>          CALL kgen_array_sumcheck("kgenref_packed_qvlat", kgen_array_sum, DBLE(SUM(kgenref_packed_qvlat, &
  1262:                   &mask=(kgenref_packed_qvlat .eq. kgenref_packed_qvlat))), .TRUE.)
  1263:               END IF
  1264:               READ (UNIT = kgen_unit) kgen_istrue
  1265:               IF (kgen_istrue) THEN
  1266:                   READ (UNIT = kgen_unit) kgen_array_sum
  1267:                   READ (UNIT = kgen_unit) kgenref_packed_qctend
  1268: V======>          CALL kgen_array_sumcheck("kgenref_packed_qctend", kgen_array_sum, DBLE(SUM(kgenref_packed_qctend, &
  1269:                   &mask=(kgenref_packed_qctend .eq. kgenref_packed_qctend))), .TRUE.)
  1270:               END IF
  1271:               READ (UNIT = kgen_unit) kgen_istrue
  1272:               IF (kgen_istrue) THEN
  1273:                   READ (UNIT = kgen_unit) kgen_array_sum
  1274:                   READ (UNIT = kgen_unit) kgenref_packed_qitend
  1275: V======>          CALL kgen_array_sumcheck("kgenref_packed_qitend", kgen_array_sum, DBLE(SUM(kgenref_packed_qitend, &
  1276:                   &mask=(kgenref_packed_qitend .eq. kgenref_packed_qitend))), .TRUE.)
  1277:               END IF
  1278:               READ (UNIT = kgen_unit) kgen_istrue
  1279:               IF (kgen_istrue) THEN
  1280:                   READ (UNIT = kgen_unit) kgen_array_sum
  1281:                   READ (UNIT = kgen_unit) kgenref_packed_nctend
  1282: V======>          CALL kgen_array_sumcheck("kgenref_packed_nctend", kgen_array_sum, DBLE(SUM(kgenref_packed_nctend, &
  1283:                   &mask=(kgenref_packed_nctend .eq. kgenref_packed_nctend))), .TRUE.)
  1284:               END IF
  1285:               READ (UNIT = kgen_unit) kgen_istrue
  1286:               IF (kgen_istrue) THEN
  1287:                   READ (UNIT = kgen_unit) kgen_array_sum
  1288:                   READ (UNIT = kgen_unit) kgenref_packed_nitend
  1289: V======>          CALL kgen_array_sumcheck("kgenref_packed_nitend", kgen_array_sum, DBLE(SUM(kgenref_packed_nitend, &
  1290:                   &mask=(kgenref_packed_nitend .eq. kgenref_packed_nitend))), .TRUE.)
  1291:               END IF
  1292:               READ (UNIT = kgen_unit) kgen_istrue
  1293:               IF (kgen_istrue) THEN
  1294:                   READ (UNIT = kgen_unit) kgen_array_sum
  1295:                   READ (UNIT = kgen_unit) kgenref_packed_qrtend
  1296: V======>          CALL kgen_array_sumcheck("kgenref_packed_qrtend", kgen_array_sum, DBLE(SUM(kgenref_packed_qrtend, &
  1297:                   &mask=(kgenref_packed_qrtend .eq. kgenref_packed_qrtend))), .TRUE.)
  1298:               END IF
  1299:               READ (UNIT = kgen_unit) kgen_istrue
  1300:               IF (kgen_istrue) THEN
  1301:                   READ (UNIT = kgen_unit) kgen_array_sum
  1302:                   READ (UNIT = kgen_unit) kgenref_packed_qstend
  1303: V======>          CALL kgen_array_sumcheck("kgenref_packed_qstend", kgen_array_sum, DBLE(SUM(kgenref_packed_qstend, &
  1304:                   &mask=(kgenref_packed_qstend .eq. kgenref_packed_qstend))), .TRUE.)
  1305:               END IF
  1306:               READ (UNIT = kgen_unit) kgen_istrue
  1307:               IF (kgen_istrue) THEN
  1308:                   READ (UNIT = kgen_unit) kgen_array_sum
  1309:                   READ (UNIT = kgen_unit) kgenref_packed_nrtend
  1310: V======>          CALL kgen_array_sumcheck("kgenref_packed_nrtend", kgen_array_sum, DBLE(SUM(kgenref_packed_nrtend, &
  1311:                   &mask=(kgenref_packed_nrtend .eq. kgenref_packed_nrtend))), .TRUE.)
  1312:               END IF
  1313:               READ (UNIT = kgen_unit) kgen_istrue
  1314:               IF (kgen_istrue) THEN
  1315:                   READ (UNIT = kgen_unit) kgen_array_sum
  1316:                   READ (UNIT = kgen_unit) kgenref_packed_nstend
  1317: V======>          CALL kgen_array_sumcheck("kgenref_packed_nstend", kgen_array_sum, DBLE(SUM(kgenref_packed_nstend, &
  1318:                   &mask=(kgenref_packed_nstend .eq. kgenref_packed_nstend))), .TRUE.)
  1319:               END IF
  1320:               READ (UNIT = kgen_unit) kgen_istrue
  1321:               IF (kgen_istrue) THEN
  1322:                   READ (UNIT = kgen_unit) kgen_array_sum
  1323:                   READ (UNIT = kgen_unit) kgenref_packed_prect
  1324: V======>          CALL kgen_array_sumcheck("kgenref_packed_prect", kgen_array_sum, DBLE(SUM(kgenref_packed_prect, &
  1325:                   &mask=(kgenref_packed_prect .eq. kgenref_packed_prect))), .TRUE.)
  1326:               END IF
  1327:               READ (UNIT = kgen_unit) kgen_istrue
  1328:               IF (kgen_istrue) THEN
  1329:                   READ (UNIT = kgen_unit) kgen_array_sum
  1330:                   READ (UNIT = kgen_unit) kgenref_packed_preci
  1331: V======>          CALL kgen_array_sumcheck("kgenref_packed_preci", kgen_array_sum, DBLE(SUM(kgenref_packed_preci, &
  1332:                   &mask=(kgenref_packed_preci .eq. kgenref_packed_preci))), .TRUE.)
  1333:               END IF
  1334:               READ (UNIT = kgen_unit) kgen_istrue
  1335:               IF (kgen_istrue) THEN
  1336:                   READ (UNIT = kgen_unit) kgen_array_sum
  1337:                   READ (UNIT = kgen_unit) kgenref_packed_nevapr
  1338: V======>          CALL kgen_array_sumcheck("kgenref_packed_nevapr", kgen_array_sum, DBLE(SUM(kgenref_packed_nevapr, &
  1339:                   &mask=(kgenref_packed_nevapr .eq. kgenref_packed_nevapr))), .TRUE.)
  1340:               END IF
  1341:               READ (UNIT = kgen_unit) kgen_istrue
  1342:               IF (kgen_istrue) THEN
  1343:                   READ (UNIT = kgen_unit) kgen_array_sum
  1344:                   READ (UNIT = kgen_unit) kgenref_packed_am_evp_st
  1345: V======>          CALL kgen_array_sumcheck("kgenref_packed_am_evp_st", kgen_array_sum, DBLE(SUM(kgenref_packed_am_evp_st, &
  1346:                   &mask=(kgenref_packed_am_evp_st .eq. kgenref_packed_am_evp_st))), .TRUE.)
  1347:               END IF
  1348:               READ (UNIT = kgen_unit) kgen_istrue
  1349:               IF (kgen_istrue) THEN
  1350:                   READ (UNIT = kgen_unit) kgen_array_sum
  1351:                   READ (UNIT = kgen_unit) kgenref_packed_evapsnow
  1352: V======>          CALL kgen_array_sumcheck("kgenref_packed_evapsnow", kgen_array_sum, DBLE(SUM(kgenref_packed_evapsnow, &
  1353:                   &mask=(kgenref_packed_evapsnow .eq. kgenref_packed_evapsnow))), .TRUE.)
  1354:               END IF
  1355:               READ (UNIT = kgen_unit) kgen_istrue
  1356:               IF (kgen_istrue) THEN
  1357:                   READ (UNIT = kgen_unit) kgen_array_sum
  1358:                   READ (UNIT = kgen_unit) kgenref_packed_prain
  1359: V======>          CALL kgen_array_sumcheck("kgenref_packed_prain", kgen_array_sum, DBLE(SUM(kgenref_packed_prain, &
  1360:                   &mask=(kgenref_packed_prain .eq. kgenref_packed_prain))), .TRUE.)
  1361:               END IF
  1362:               READ (UNIT = kgen_unit) kgen_istrue
  1363:               IF (kgen_istrue) THEN
  1364:                   READ (UNIT = kgen_unit) kgen_array_sum
  1365:                   READ (UNIT = kgen_unit) kgenref_packed_prodsnow
  1366: V======>          CALL kgen_array_sumcheck("kgenref_packed_prodsnow", kgen_array_sum, DBLE(SUM(kgenref_packed_prodsnow, &
  1367:                   &mask=(kgenref_packed_prodsnow .eq. kgenref_packed_prodsnow))), .TRUE.)
  1368:               END IF
  1369:               READ (UNIT = kgen_unit) kgen_istrue
  1370:               IF (kgen_istrue) THEN
  1371:                   READ (UNIT = kgen_unit) kgen_array_sum
  1372:                   READ (UNIT = kgen_unit) kgenref_packed_cmeout
  1373: V======>          CALL kgen_array_sumcheck("kgenref_packed_cmeout", kgen_array_sum, DBLE(SUM(kgenref_packed_cmeout, &
  1374:                   &mask=(kgenref_packed_cmeout .eq. kgenref_packed_cmeout))), .TRUE.)
  1375:               END IF
  1376:               READ (UNIT = kgen_unit) kgen_istrue
  1377:               IF (kgen_istrue) THEN
  1378:                   READ (UNIT = kgen_unit) kgen_array_sum
  1379:                   READ (UNIT = kgen_unit) kgenref_packed_qsout
  1380: V======>          CALL kgen_array_sumcheck("kgenref_packed_qsout", kgen_array_sum, DBLE(SUM(kgenref_packed_qsout, &
  1381:                   &mask=(kgenref_packed_qsout .eq. kgenref_packed_qsout))), .TRUE.)
  1382:               END IF
  1383:               READ (UNIT = kgen_unit) kgen_istrue
  1384:               IF (kgen_istrue) THEN
  1385:                   READ (UNIT = kgen_unit) kgen_array_sum
  1386:                   READ (UNIT = kgen_unit) kgenref_packed_cflx
  1387: V======>          CALL kgen_array_sumcheck("kgenref_packed_cflx", kgen_array_sum, DBLE(SUM(kgenref_packed_cflx, mask=(kgenref_packed_cflx &
  1388:                   &.eq. kgenref_packed_cflx))), .TRUE.)
  1389:               END IF
  1390:               READ (UNIT = kgen_unit) kgen_istrue
  1391:               IF (kgen_istrue) THEN
  1392:                   READ (UNIT = kgen_unit) kgen_array_sum
  1393:                   READ (UNIT = kgen_unit) kgenref_packed_iflx
  1394: V======>          CALL kgen_array_sumcheck("kgenref_packed_iflx", kgen_array_sum, DBLE(SUM(kgenref_packed_iflx, mask=(kgenref_packed_iflx &
  1395:                   &.eq. kgenref_packed_iflx))), .TRUE.)
  1396:               END IF
  1397:               READ (UNIT = kgen_unit) kgen_istrue
  1398:               IF (kgen_istrue) THEN
  1399:                   READ (UNIT = kgen_unit) kgen_array_sum
  1400:                   READ (UNIT = kgen_unit) kgenref_packed_rflx
  1401: V======>          CALL kgen_array_sumcheck("kgenref_packed_rflx", kgen_array_sum, DBLE(SUM(kgenref_packed_rflx, mask=(kgenref_packed_rflx &
  1402:                   &.eq. kgenref_packed_rflx))), .TRUE.)
  1403:               END IF
  1404:               READ (UNIT = kgen_unit) kgen_istrue
  1405:               IF (kgen_istrue) THEN
  1406:                   READ (UNIT = kgen_unit) kgen_array_sum
  1407:                   READ (UNIT = kgen_unit) kgenref_packed_sflx
  1408: V======>          CALL kgen_array_sumcheck("kgenref_packed_sflx", kgen_array_sum, DBLE(SUM(kgenref_packed_sflx, mask=(kgenref_packed_sflx &
  1409:                   &.eq. kgenref_packed_sflx))), .TRUE.)
  1410:               END IF
  1411:               READ (UNIT = kgen_unit) kgen_istrue
  1412:               IF (kgen_istrue) THEN
  1413:                   READ (UNIT = kgen_unit) kgen_array_sum
  1414:                   READ (UNIT = kgen_unit) kgenref_packed_qrout
  1415: V======>          CALL kgen_array_sumcheck("kgenref_packed_qrout", kgen_array_sum, DBLE(SUM(kgenref_packed_qrout, &
  1416:                   &mask=(kgenref_packed_qrout .eq. kgenref_packed_qrout))), .TRUE.)
  1417:               END IF
  1418:               READ (UNIT = kgen_unit) kgen_istrue
  1419:               IF (kgen_istrue) THEN
  1420:                   READ (UNIT = kgen_unit) kgen_array_sum
  1421:                   READ (UNIT = kgen_unit) kgenref_packed_qcsevap
  1422: V======>          CALL kgen_array_sumcheck("kgenref_packed_qcsevap", kgen_array_sum, DBLE(SUM(kgenref_packed_qcsevap, &
  1423:                   &mask=(kgenref_packed_qcsevap .eq. kgenref_packed_qcsevap))), .TRUE.)
  1424:               END IF
  1425:               READ (UNIT = kgen_unit) kgen_istrue
  1426:               IF (kgen_istrue) THEN
  1427:                   READ (UNIT = kgen_unit) kgen_array_sum
  1428:                   READ (UNIT = kgen_unit) kgenref_packed_qisevap
  1429: V======>          CALL kgen_array_sumcheck("kgenref_packed_qisevap", kgen_array_sum, DBLE(SUM(kgenref_packed_qisevap, &
  1430:                   &mask=(kgenref_packed_qisevap .eq. kgenref_packed_qisevap))), .TRUE.)
  1431:               END IF
  1432:               READ (UNIT = kgen_unit) kgen_istrue
  1433:               IF (kgen_istrue) THEN
  1434:                   READ (UNIT = kgen_unit) kgen_array_sum
  1435:                   READ (UNIT = kgen_unit) kgenref_packed_qvres
  1436: V======>          CALL kgen_array_sumcheck("kgenref_packed_qvres", kgen_array_sum, DBLE(SUM(kgenref_packed_qvres, &
  1437:                   &mask=(kgenref_packed_qvres .eq. kgenref_packed_qvres))), .TRUE.)
  1438:               END IF
  1439:               READ (UNIT = kgen_unit) kgen_istrue
  1440:               IF (kgen_istrue) THEN
  1441:                   READ (UNIT = kgen_unit) kgen_array_sum
  1442:                   READ (UNIT = kgen_unit) kgenref_packed_cmei
  1443: V======>          CALL kgen_array_sumcheck("kgenref_packed_cmei", kgen_array_sum, DBLE(SUM(kgenref_packed_cmei, mask=(kgenref_packed_cmei &
  1444:                   &.eq. kgenref_packed_cmei))), .TRUE.)
  1445:               END IF
  1446:               READ (UNIT = kgen_unit) kgen_istrue
  1447:               IF (kgen_istrue) THEN
  1448:                   READ (UNIT = kgen_unit) kgen_array_sum
  1449:                   READ (UNIT = kgen_unit) kgenref_packed_vtrmc
  1450: V======>          CALL kgen_array_sumcheck("kgenref_packed_vtrmc", kgen_array_sum, DBLE(SUM(kgenref_packed_vtrmc, &
  1451:                   &mask=(kgenref_packed_vtrmc .eq. kgenref_packed_vtrmc))), .TRUE.)
  1452:               END IF
  1453:               READ (UNIT = kgen_unit) kgen_istrue
  1454:               IF (kgen_istrue) THEN
  1455:                   READ (UNIT = kgen_unit) kgen_array_sum
  1456:                   READ (UNIT = kgen_unit) kgenref_packed_vtrmi
  1457: V======>          CALL kgen_array_sumcheck("kgenref_packed_vtrmi", kgen_array_sum, DBLE(SUM(kgenref_packed_vtrmi, &
  1458:                   &mask=(kgenref_packed_vtrmi .eq. kgenref_packed_vtrmi))), .TRUE.)
  1459:               END IF
  1460:               READ (UNIT = kgen_unit) kgen_istrue
  1461:               IF (kgen_istrue) THEN
  1462:                   READ (UNIT = kgen_unit) kgen_array_sum
  1463:                   READ (UNIT = kgen_unit) kgenref_packed_qcsedten
  1464: V======>          CALL kgen_array_sumcheck("kgenref_packed_qcsedten", kgen_array_sum, DBLE(SUM(kgenref_packed_qcsedten, &
  1465:                   &mask=(kgenref_packed_qcsedten .eq. kgenref_packed_qcsedten))), .TRUE.)
  1466:               END IF
  1467:               READ (UNIT = kgen_unit) kgen_istrue
  1468:               IF (kgen_istrue) THEN
  1469:                   READ (UNIT = kgen_unit) kgen_array_sum
  1470:                   READ (UNIT = kgen_unit) kgenref_packed_qisedten
  1471: V======>          CALL kgen_array_sumcheck("kgenref_packed_qisedten", kgen_array_sum, DBLE(SUM(kgenref_packed_qisedten, &
  1472:                   &mask=(kgenref_packed_qisedten .eq. kgenref_packed_qisedten))), .TRUE.)
  1473:               END IF
  1474:               READ (UNIT = kgen_unit) kgen_istrue
  1475:               IF (kgen_istrue) THEN
  1476:                   READ (UNIT = kgen_unit) kgen_array_sum
  1477:                   READ (UNIT = kgen_unit) kgenref_packed_qrsedten
  1478: V======>          CALL kgen_array_sumcheck("kgenref_packed_qrsedten", kgen_array_sum, DBLE(SUM(kgenref_packed_qrsedten, &
  1479:                   &mask=(kgenref_packed_qrsedten .eq. kgenref_packed_qrsedten))), .TRUE.)
  1480:               END IF
  1481:               READ (UNIT = kgen_unit) kgen_istrue
  1482:               IF (kgen_istrue) THEN
  1483:                   READ (UNIT = kgen_unit) kgen_array_sum
  1484:                   READ (UNIT = kgen_unit) kgenref_packed_qssedten
  1485: V======>          CALL kgen_array_sumcheck("kgenref_packed_qssedten", kgen_array_sum, DBLE(SUM(kgenref_packed_qssedten, &
  1486:                   &mask=(kgenref_packed_qssedten .eq. kgenref_packed_qssedten))), .TRUE.)
  1487:               END IF
  1488:               READ (UNIT = kgen_unit) kgen_istrue
  1489:               IF (kgen_istrue) THEN
  1490:                   READ (UNIT = kgen_unit) kgen_array_sum
  1491:                   READ (UNIT = kgen_unit) kgenref_packed_umr
  1492: V======>          CALL kgen_array_sumcheck("kgenref_packed_umr", kgen_array_sum, DBLE(SUM(kgenref_packed_umr, mask=(kgenref_packed_umr .eq. &
  1493:                   &kgenref_packed_umr))), .TRUE.)
  1494:               END IF
  1495:               READ (UNIT = kgen_unit) kgen_istrue
  1496:               IF (kgen_istrue) THEN
  1497:                   READ (UNIT = kgen_unit) kgen_array_sum
  1498:                   READ (UNIT = kgen_unit) kgenref_packed_ums
  1499: V======>          CALL kgen_array_sumcheck("kgenref_packed_ums", kgen_array_sum, DBLE(SUM(kgenref_packed_ums, mask=(kgenref_packed_ums .eq. &
  1500:                   &kgenref_packed_ums))), .TRUE.)
  1501:               END IF
  1502:               READ (UNIT = kgen_unit) kgen_istrue
  1503:               IF (kgen_istrue) THEN
  1504:                   READ (UNIT = kgen_unit) kgen_array_sum
  1505:                   READ (UNIT = kgen_unit) kgenref_packed_pra
  1506: V======>          CALL kgen_array_sumcheck("kgenref_packed_pra", kgen_array_sum, DBLE(SUM(kgenref_packed_pra, mask=(kgenref_packed_pra .eq. &
  1507:                   &kgenref_packed_pra))), .TRUE.)
  1508:               END IF
  1509:               READ (UNIT = kgen_unit) kgen_istrue
  1510:               IF (kgen_istrue) THEN
  1511:                   READ (UNIT = kgen_unit) kgen_array_sum
  1512:                   READ (UNIT = kgen_unit) kgenref_packed_prc
  1513: V======>          CALL kgen_array_sumcheck("kgenref_packed_prc", kgen_array_sum, DBLE(SUM(kgenref_packed_prc, mask=(kgenref_packed_prc .eq. &
  1514:                   &kgenref_packed_prc))), .TRUE.)
  1515:               END IF
  1516:               READ (UNIT = kgen_unit) kgen_istrue
  1517:               IF (kgen_istrue) THEN
  1518:                   READ (UNIT = kgen_unit) kgen_array_sum
  1519:                   READ (UNIT = kgen_unit) kgenref_packed_mnuccc
  1520: V======>          CALL kgen_array_sumcheck("kgenref_packed_mnuccc", kgen_array_sum, DBLE(SUM(kgenref_packed_mnuccc, &
  1521:                   &mask=(kgenref_packed_mnuccc .eq. kgenref_packed_mnuccc))), .TRUE.)
  1522:               END IF
  1523:               READ (UNIT = kgen_unit) kgen_istrue
  1524:               IF (kgen_istrue) THEN
  1525:                   READ (UNIT = kgen_unit) kgen_array_sum
  1526:                   READ (UNIT = kgen_unit) kgenref_packed_mnucct
  1527: V======>          CALL kgen_array_sumcheck("kgenref_packed_mnucct", kgen_array_sum, DBLE(SUM(kgenref_packed_mnucct, &
  1528:                   &mask=(kgenref_packed_mnucct .eq. kgenref_packed_mnucct))), .TRUE.)
  1529:               END IF
  1530:               READ (UNIT = kgen_unit) kgen_istrue
  1531:               IF (kgen_istrue) THEN
  1532:                   READ (UNIT = kgen_unit) kgen_array_sum
  1533:                   READ (UNIT = kgen_unit) kgenref_packed_msacwi
  1534: V======>          CALL kgen_array_sumcheck("kgenref_packed_msacwi", kgen_array_sum, DBLE(SUM(kgenref_packed_msacwi, &
  1535:                   &mask=(kgenref_packed_msacwi .eq. kgenref_packed_msacwi))), .TRUE.)
  1536:               END IF
  1537:               READ (UNIT = kgen_unit) kgen_istrue
  1538:               IF (kgen_istrue) THEN
  1539:                   READ (UNIT = kgen_unit) kgen_array_sum
  1540:                   READ (UNIT = kgen_unit) kgenref_packed_psacws
  1541: V======>          CALL kgen_array_sumcheck("kgenref_packed_psacws", kgen_array_sum, DBLE(SUM(kgenref_packed_psacws, &
  1542:                   &mask=(kgenref_packed_psacws .eq. kgenref_packed_psacws))), .TRUE.)
  1543:               END IF
  1544:               READ (UNIT = kgen_unit) kgen_istrue
  1545:               IF (kgen_istrue) THEN
  1546:                   READ (UNIT = kgen_unit) kgen_array_sum
  1547:                   READ (UNIT = kgen_unit) kgenref_packed_bergs
  1548: V======>          CALL kgen_array_sumcheck("kgenref_packed_bergs", kgen_array_sum, DBLE(SUM(kgenref_packed_bergs, &
  1549:                   &mask=(kgenref_packed_bergs .eq. kgenref_packed_bergs))), .TRUE.)
  1550:               END IF
  1551:               READ (UNIT = kgen_unit) kgen_istrue
  1552:               IF (kgen_istrue) THEN
  1553:                   READ (UNIT = kgen_unit) kgen_array_sum
  1554:                   READ (UNIT = kgen_unit) kgenref_packed_berg
  1555: V======>          CALL kgen_array_sumcheck("kgenref_packed_berg", kgen_array_sum, DBLE(SUM(kgenref_packed_berg, mask=(kgenref_packed_berg &
  1556:                   &.eq. kgenref_packed_berg))), .TRUE.)
  1557:               END IF
  1558:               READ (UNIT = kgen_unit) kgen_istrue
  1559:               IF (kgen_istrue) THEN
  1560:                   READ (UNIT = kgen_unit) kgen_array_sum
  1561:                   READ (UNIT = kgen_unit) kgenref_packed_melt
  1562: V======>          CALL kgen_array_sumcheck("kgenref_packed_melt", kgen_array_sum, DBLE(SUM(kgenref_packed_melt, mask=(kgenref_packed_melt &
  1563:                   &.eq. kgenref_packed_melt))), .TRUE.)
  1564:               END IF
  1565:               READ (UNIT = kgen_unit) kgen_istrue
  1566:               IF (kgen_istrue) THEN
  1567:                   READ (UNIT = kgen_unit) kgen_array_sum
  1568:                   READ (UNIT = kgen_unit) kgenref_packed_homo
  1569: V======>          CALL kgen_array_sumcheck("kgenref_packed_homo", kgen_array_sum, DBLE(SUM(kgenref_packed_homo, mask=(kgenref_packed_homo &
  1570:                   &.eq. kgenref_packed_homo))), .TRUE.)
  1571:               END IF
  1572:               READ (UNIT = kgen_unit) kgen_istrue
  1573:               IF (kgen_istrue) THEN
  1574:                   READ (UNIT = kgen_unit) kgen_array_sum
  1575:                   READ (UNIT = kgen_unit) kgenref_packed_qcres
  1576: V======>          CALL kgen_array_sumcheck("kgenref_packed_qcres", kgen_array_sum, DBLE(SUM(kgenref_packed_qcres, &
  1577:                   &mask=(kgenref_packed_qcres .eq. kgenref_packed_qcres))), .TRUE.)
  1578:               END IF
  1579:               READ (UNIT = kgen_unit) kgen_istrue
  1580:               IF (kgen_istrue) THEN
  1581:                   READ (UNIT = kgen_unit) kgen_array_sum
  1582:                   READ (UNIT = kgen_unit) kgenref_packed_prci
  1583: V======>          CALL kgen_array_sumcheck("kgenref_packed_prci", kgen_array_sum, DBLE(SUM(kgenref_packed_prci, mask=(kgenref_packed_prci &
  1584:                   &.eq. kgenref_packed_prci))), .TRUE.)
  1585:               END IF
  1586:               READ (UNIT = kgen_unit) kgen_istrue
  1587:               IF (kgen_istrue) THEN
  1588:                   READ (UNIT = kgen_unit) kgen_array_sum
  1589:                   READ (UNIT = kgen_unit) kgenref_packed_prai
  1590: V======>          CALL kgen_array_sumcheck("kgenref_packed_prai", kgen_array_sum, DBLE(SUM(kgenref_packed_prai, mask=(kgenref_packed_prai &
  1591:                   &.eq. kgenref_packed_prai))), .TRUE.)
  1592:               END IF
  1593:               READ (UNIT = kgen_unit) kgen_istrue
  1594:               IF (kgen_istrue) THEN
  1595:                   READ (UNIT = kgen_unit) kgen_array_sum
  1596:                   READ (UNIT = kgen_unit) kgenref_packed_qires
  1597: V======>          CALL kgen_array_sumcheck("kgenref_packed_qires", kgen_array_sum, DBLE(SUM(kgenref_packed_qires, &
  1598:                   &mask=(kgenref_packed_qires .eq. kgenref_packed_qires))), .TRUE.)
  1599:               END IF
  1600:               READ (UNIT = kgen_unit) kgen_istrue
  1601:               IF (kgen_istrue) THEN
  1602:                   READ (UNIT = kgen_unit) kgen_array_sum
  1603:                   READ (UNIT = kgen_unit) kgenref_packed_mnuccr
  1604: V======>          CALL kgen_array_sumcheck("kgenref_packed_mnuccr", kgen_array_sum, DBLE(SUM(kgenref_packed_mnuccr, &
  1605:                   &mask=(kgenref_packed_mnuccr .eq. kgenref_packed_mnuccr))), .TRUE.)
  1606:               END IF
  1607:               READ (UNIT = kgen_unit) kgen_istrue
  1608:               IF (kgen_istrue) THEN
  1609:                   READ (UNIT = kgen_unit) kgen_array_sum
  1610:                   READ (UNIT = kgen_unit) kgenref_packed_pracs
  1611: V======>          CALL kgen_array_sumcheck("kgenref_packed_pracs", kgen_array_sum, DBLE(SUM(kgenref_packed_pracs, &
  1612:                   &mask=(kgenref_packed_pracs .eq. kgenref_packed_pracs))), .TRUE.)
  1613:               END IF
  1614:               READ (UNIT = kgen_unit) kgen_istrue
  1615:               IF (kgen_istrue) THEN
  1616:                   READ (UNIT = kgen_unit) kgen_array_sum
  1617:                   READ (UNIT = kgen_unit) kgenref_packed_meltsdt
  1618: V======>          CALL kgen_array_sumcheck("kgenref_packed_meltsdt", kgen_array_sum, DBLE(SUM(kgenref_packed_meltsdt, &
  1619:                   &mask=(kgenref_packed_meltsdt .eq. kgenref_packed_meltsdt))), .TRUE.)
  1620:               END IF
  1621:               READ (UNIT = kgen_unit) kgen_istrue
  1622:               IF (kgen_istrue) THEN
  1623:                   READ (UNIT = kgen_unit) kgen_array_sum
  1624:                   READ (UNIT = kgen_unit) kgenref_packed_frzrdt
  1625: V======>          CALL kgen_array_sumcheck("kgenref_packed_frzrdt", kgen_array_sum, DBLE(SUM(kgenref_packed_frzrdt, &
  1626:                   &mask=(kgenref_packed_frzrdt .eq. kgenref_packed_frzrdt))), .TRUE.)
  1627:               END IF
  1628:               READ (UNIT = kgen_unit) kgen_istrue
  1629:               IF (kgen_istrue) THEN
  1630:                   READ (UNIT = kgen_unit) kgen_array_sum
  1631:                   READ (UNIT = kgen_unit) kgenref_packed_mnuccd
  1632: V======>          CALL kgen_array_sumcheck("kgenref_packed_mnuccd", kgen_array_sum, DBLE(SUM(kgenref_packed_mnuccd, &
  1633:                   &mask=(kgenref_packed_mnuccd .eq. kgenref_packed_mnuccd))), .TRUE.)
  1634:               END IF
  1635:               READ (UNIT = kgen_unit) kgen_istrue
  1636:               IF (kgen_istrue) THEN
  1637:                   READ (UNIT = kgen_unit) kgen_array_sum
  1638:                   READ (UNIT = kgen_unit) kgenref_packed_nrout
  1639: V======>          CALL kgen_array_sumcheck("kgenref_packed_nrout", kgen_array_sum, DBLE(SUM(kgenref_packed_nrout, &
  1640:                   &mask=(kgenref_packed_nrout .eq. kgenref_packed_nrout))), .TRUE.)
  1641:               END IF
  1642:               READ (UNIT = kgen_unit) kgen_istrue
  1643:               IF (kgen_istrue) THEN
  1644:                   READ (UNIT = kgen_unit) kgen_array_sum
  1645:                   READ (UNIT = kgen_unit) kgenref_packed_nsout
  1646: V======>          CALL kgen_array_sumcheck("kgenref_packed_nsout", kgen_array_sum, DBLE(SUM(kgenref_packed_nsout, &
  1647:                   &mask=(kgenref_packed_nsout .eq. kgenref_packed_nsout))), .TRUE.)
  1648:               END IF
  1649:               READ (UNIT = kgen_unit) kgen_istrue
  1650:               IF (kgen_istrue) THEN
  1651:                   READ (UNIT = kgen_unit) kgen_array_sum
  1652:                   READ (UNIT = kgen_unit) kgenref_packed_refl
  1653: V======>          CALL kgen_array_sumcheck("kgenref_packed_refl", kgen_array_sum, DBLE(SUM(kgenref_packed_refl, mask=(kgenref_packed_refl &
  1654:                   &.eq. kgenref_packed_refl))), .TRUE.)
  1655:               END IF
  1656:               READ (UNIT = kgen_unit) kgen_istrue
  1657:               IF (kgen_istrue) THEN
  1658:                   READ (UNIT = kgen_unit) kgen_array_sum
  1659:                   READ (UNIT = kgen_unit) kgenref_packed_arefl
  1660: V======>          CALL kgen_array_sumcheck("kgenref_packed_arefl", kgen_array_sum, DBLE(SUM(kgenref_packed_arefl, &
  1661:                   &mask=(kgenref_packed_arefl .eq. kgenref_packed_arefl))), .TRUE.)
  1662:               END IF
  1663:               READ (UNIT = kgen_unit) kgen_istrue
  1664:               IF (kgen_istrue) THEN
  1665:                   READ (UNIT = kgen_unit) kgen_array_sum
  1666:                   READ (UNIT = kgen_unit) kgenref_packed_areflz
  1667: V======>          CALL kgen_array_sumcheck("kgenref_packed_areflz", kgen_array_sum, DBLE(SUM(kgenref_packed_areflz, &
  1668:                   &mask=(kgenref_packed_areflz .eq. kgenref_packed_areflz))), .TRUE.)
  1669:               END IF
  1670:               READ (UNIT = kgen_unit) kgen_istrue
  1671:               IF (kgen_istrue) THEN
  1672:                   READ (UNIT = kgen_unit) kgen_array_sum
  1673:                   READ (UNIT = kgen_unit) kgenref_packed_frefl
  1674: V======>          CALL kgen_array_sumcheck("kgenref_packed_frefl", kgen_array_sum, DBLE(SUM(kgenref_packed_frefl, &
  1675:                   &mask=(kgenref_packed_frefl .eq. kgenref_packed_frefl))), .TRUE.)
  1676:               END IF
  1677:               READ (UNIT = kgen_unit) kgen_istrue
  1678:               IF (kgen_istrue) THEN
  1679:                   READ (UNIT = kgen_unit) kgen_array_sum
  1680:                   READ (UNIT = kgen_unit) kgenref_packed_csrfl
  1681: V======>          CALL kgen_array_sumcheck("kgenref_packed_csrfl", kgen_array_sum, DBLE(SUM(kgenref_packed_csrfl, &
  1682:                   &mask=(kgenref_packed_csrfl .eq. kgenref_packed_csrfl))), .TRUE.)
  1683:               END IF
  1684:               READ (UNIT = kgen_unit) kgen_istrue
  1685:               IF (kgen_istrue) THEN
  1686:                   READ (UNIT = kgen_unit) kgen_array_sum
  1687:                   READ (UNIT = kgen_unit) kgenref_packed_acsrfl
  1688: V======>          CALL kgen_array_sumcheck("kgenref_packed_acsrfl", kgen_array_sum, DBLE(SUM(kgenref_packed_acsrfl, &
  1689:                   &mask=(kgenref_packed_acsrfl .eq. kgenref_packed_acsrfl))), .TRUE.)
  1690:               END IF
  1691:               READ (UNIT = kgen_unit) kgen_istrue
  1692:               IF (kgen_istrue) THEN
  1693:                   READ (UNIT = kgen_unit) kgen_array_sum
  1694:                   READ (UNIT = kgen_unit) kgenref_packed_fcsrfl
  1695: V======>          CALL kgen_array_sumcheck("kgenref_packed_fcsrfl", kgen_array_sum, DBLE(SUM(kgenref_packed_fcsrfl, &
  1696:                   &mask=(kgenref_packed_fcsrfl .eq. kgenref_packed_fcsrfl))), .TRUE.)
  1697:               END IF
  1698:               READ (UNIT = kgen_unit) kgen_istrue
  1699:               IF (kgen_istrue) THEN
  1700:                   READ (UNIT = kgen_unit) kgen_array_sum
  1701:                   READ (UNIT = kgen_unit) kgenref_packed_rercld
  1702: V======>          CALL kgen_array_sumcheck("kgenref_packed_rercld", kgen_array_sum, DBLE(SUM(kgenref_packed_rercld, &
  1703:                   &mask=(kgenref_packed_rercld .eq. kgenref_packed_rercld))), .TRUE.)
  1704:               END IF
  1705:               READ (UNIT = kgen_unit) kgen_istrue
  1706:               IF (kgen_istrue) THEN
  1707:                   READ (UNIT = kgen_unit) kgen_array_sum
  1708:                   READ (UNIT = kgen_unit) kgenref_packed_ncai
  1709: V======>          CALL kgen_array_sumcheck("kgenref_packed_ncai", kgen_array_sum, DBLE(SUM(kgenref_packed_ncai, mask=(kgenref_packed_ncai &
  1710:                   &.eq. kgenref_packed_ncai))), .TRUE.)
  1711:               END IF
  1712:               READ (UNIT = kgen_unit) kgen_istrue
  1713:               IF (kgen_istrue) THEN
  1714:                   READ (UNIT = kgen_unit) kgen_array_sum
  1715:                   READ (UNIT = kgen_unit) kgenref_packed_ncal
  1716: V======>          CALL kgen_array_sumcheck("kgenref_packed_ncal", kgen_array_sum, DBLE(SUM(kgenref_packed_ncal, mask=(kgenref_packed_ncal &
  1717:                   &.eq. kgenref_packed_ncal))), .TRUE.)
  1718:               END IF
  1719:               READ (UNIT = kgen_unit) kgen_istrue
  1720:               IF (kgen_istrue) THEN
  1721:                   READ (UNIT = kgen_unit) kgen_array_sum
  1722:                   READ (UNIT = kgen_unit) kgenref_packed_qrout2
  1723: V======>          CALL kgen_array_sumcheck("kgenref_packed_qrout2", kgen_array_sum, DBLE(SUM(kgenref_packed_qrout2, &
  1724:                   &mask=(kgenref_packed_qrout2 .eq. kgenref_packed_qrout2))), .TRUE.)
  1725:               END IF
  1726:               READ (UNIT = kgen_unit) kgen_istrue
  1727:               IF (kgen_istrue) THEN
  1728:                   READ (UNIT = kgen_unit) kgen_array_sum
  1729:                   READ (UNIT = kgen_unit) kgenref_packed_qsout2
  1730: V======>          CALL kgen_array_sumcheck("kgenref_packed_qsout2", kgen_array_sum, DBLE(SUM(kgenref_packed_qsout2, &
  1731:                   &mask=(kgenref_packed_qsout2 .eq. kgenref_packed_qsout2))), .TRUE.)
  1732:               END IF
  1733:               READ (UNIT = kgen_unit) kgen_istrue
  1734:               IF (kgen_istrue) THEN
  1735:                   READ (UNIT = kgen_unit) kgen_array_sum
  1736:                   READ (UNIT = kgen_unit) kgenref_packed_nrout2
  1737: V======>          CALL kgen_array_sumcheck("kgenref_packed_nrout2", kgen_array_sum, DBLE(SUM(kgenref_packed_nrout2, &
  1738:                   &mask=(kgenref_packed_nrout2 .eq. kgenref_packed_nrout2))), .TRUE.)
  1739:               END IF
  1740:               READ (UNIT = kgen_unit) kgen_istrue
  1741:               IF (kgen_istrue) THEN
  1742:                   READ (UNIT = kgen_unit) kgen_array_sum
  1743:                   READ (UNIT = kgen_unit) kgenref_packed_nsout2
  1744: V======>          CALL kgen_array_sumcheck("kgenref_packed_nsout2", kgen_array_sum, DBLE(SUM(kgenref_packed_nsout2, &
  1745:                   &mask=(kgenref_packed_nsout2 .eq. kgenref_packed_nsout2))), .TRUE.)
  1746:               END IF
  1747:               READ (UNIT = kgen_unit) kgen_istrue
  1748:               IF (kgen_istrue) THEN
  1749:                   READ (UNIT = kgen_unit) kgen_array_sum
  1750:                   READ (UNIT = kgen_unit) kgenref_packed_freqs
  1751: V======>          CALL kgen_array_sumcheck("kgenref_packed_freqs", kgen_array_sum, DBLE(SUM(kgenref_packed_freqs, &
  1752:                   &mask=(kgenref_packed_freqs .eq. kgenref_packed_freqs))), .TRUE.)
  1753:               END IF
  1754:               READ (UNIT = kgen_unit) kgen_istrue
  1755:               IF (kgen_istrue) THEN
  1756:                   READ (UNIT = kgen_unit) kgen_array_sum
  1757:                   READ (UNIT = kgen_unit) kgenref_packed_freqr
  1758: V======>          CALL kgen_array_sumcheck("kgenref_packed_freqr", kgen_array_sum, DBLE(SUM(kgenref_packed_freqr, &
  1759:                   &mask=(kgenref_packed_freqr .eq. kgenref_packed_freqr))), .TRUE.)
  1760:               END IF
  1761:               READ (UNIT = kgen_unit) kgen_istrue
  1762:               IF (kgen_istrue) THEN
  1763:                   READ (UNIT = kgen_unit) kgen_array_sum
  1764:                   READ (UNIT = kgen_unit) kgenref_packed_nfice
  1765: V======>          CALL kgen_array_sumcheck("kgenref_packed_nfice", kgen_array_sum, DBLE(SUM(kgenref_packed_nfice, &
  1766:                   &mask=(kgenref_packed_nfice .eq. kgenref_packed_nfice))), .TRUE.)
  1767:               END IF
  1768:               READ (UNIT = kgen_unit) kgen_istrue
  1769:               IF (kgen_istrue) THEN
  1770:                   READ (UNIT = kgen_unit) kgen_array_sum
  1771:                   READ (UNIT = kgen_unit) kgenref_packed_prer_evap
  1772: V======>          CALL kgen_array_sumcheck("kgenref_packed_prer_evap", kgen_array_sum, DBLE(SUM(kgenref_packed_prer_evap, &
  1773:                   &mask=(kgenref_packed_prer_evap .eq. kgenref_packed_prer_evap))), .TRUE.)
  1774:               END IF
  1775:               READ (UNIT = kgen_unit) kgen_istrue
  1776:               IF (kgen_istrue) THEN
  1777:                   READ (UNIT = kgen_unit) kgen_array_sum
  1778:                   READ (UNIT = kgen_unit) kgenref_packed_qcrat
  1779: V======>          CALL kgen_array_sumcheck("kgenref_packed_qcrat", kgen_array_sum, DBLE(SUM(kgenref_packed_qcrat, &
  1780:                   &mask=(kgenref_packed_qcrat .eq. kgenref_packed_qcrat))), .TRUE.)
  1781:               END IF
  1782:               READ (UNIT = kgen_unit) kgen_istrue
  1783:               IF (kgen_istrue) THEN
  1784:                   READ (UNIT = kgen_unit) kgen_array_sum
  1785:                   READ (UNIT = kgen_unit) kgenref_packed_rel
  1786: V======>          CALL kgen_array_sumcheck("kgenref_packed_rel", kgen_array_sum, DBLE(SUM(kgenref_packed_rel, mask=(kgenref_packed_rel .eq. &
  1787:                   &kgenref_packed_rel))), .TRUE.)
  1788:               END IF
  1789:               READ (UNIT = kgen_unit) kgen_istrue
  1790:               IF (kgen_istrue) THEN
  1791:                   READ (UNIT = kgen_unit) kgen_array_sum
  1792:                   READ (UNIT = kgen_unit) kgenref_packed_rei
  1793: V======>          CALL kgen_array_sumcheck("kgenref_packed_rei", kgen_array_sum, DBLE(SUM(kgenref_packed_rei, mask=(kgenref_packed_rei .eq. &
  1794:                   &kgenref_packed_rei))), .TRUE.)
  1795:               END IF
  1796:               READ (UNIT = kgen_unit) kgen_istrue
  1797:               IF (kgen_istrue) THEN
  1798:                   READ (UNIT = kgen_unit) kgen_array_sum
  1799:                   READ (UNIT = kgen_unit) kgenref_packed_sadice
  1800: V======>          CALL kgen_array_sumcheck("kgenref_packed_sadice", kgen_array_sum, DBLE(SUM(kgenref_packed_sadice, &
  1801:                   &mask=(kgenref_packed_sadice .eq. kgenref_packed_sadice))), .TRUE.)
  1802:               END IF
  1803:               READ (UNIT = kgen_unit) kgen_istrue
  1804:               IF (kgen_istrue) THEN
  1805:                   READ (UNIT = kgen_unit) kgen_array_sum
  1806:                   READ (UNIT = kgen_unit) kgenref_packed_sadsnow
  1807: V======>          CALL kgen_array_sumcheck("kgenref_packed_sadsnow", kgen_array_sum, DBLE(SUM(kgenref_packed_sadsnow, &
  1808:                   &mask=(kgenref_packed_sadsnow .eq. kgenref_packed_sadsnow))), .TRUE.)
  1809:               END IF
  1810:               READ (UNIT = kgen_unit) kgen_istrue
  1811:               IF (kgen_istrue) THEN
  1812:                   READ (UNIT = kgen_unit) kgen_array_sum
  1813:                   READ (UNIT = kgen_unit) kgenref_packed_lambdac
  1814: V======>          CALL kgen_array_sumcheck("kgenref_packed_lambdac", kgen_array_sum, DBLE(SUM(kgenref_packed_lambdac, &
  1815:                   &mask=(kgenref_packed_lambdac .eq. kgenref_packed_lambdac))), .TRUE.)
  1816:               END IF
  1817:               READ (UNIT = kgen_unit) kgen_istrue
  1818:               IF (kgen_istrue) THEN
  1819:                   READ (UNIT = kgen_unit) kgen_array_sum
  1820:                   READ (UNIT = kgen_unit) kgenref_packed_mu
  1821: V======>          CALL kgen_array_sumcheck("kgenref_packed_mu", kgen_array_sum, DBLE(SUM(kgenref_packed_mu, mask=(kgenref_packed_mu .eq. &
  1822:                   &kgenref_packed_mu))), .TRUE.)
  1823:               END IF
  1824:               READ (UNIT = kgen_unit) kgen_istrue
  1825:               IF (kgen_istrue) THEN
  1826:                   READ (UNIT = kgen_unit) kgen_array_sum
  1827:                   READ (UNIT = kgen_unit) kgenref_packed_des
  1828: V======>          CALL kgen_array_sumcheck("kgenref_packed_des", kgen_array_sum, DBLE(SUM(kgenref_packed_des, mask=(kgenref_packed_des .eq. &
  1829:                   &kgenref_packed_des))), .TRUE.)
  1830:               END IF
  1831:               READ (UNIT = kgen_unit) kgen_istrue
  1832:               IF (kgen_istrue) THEN
  1833:                   READ (UNIT = kgen_unit) kgen_array_sum
  1834:                   READ (UNIT = kgen_unit) kgenref_packed_dei
  1835: V======>          CALL kgen_array_sumcheck("kgenref_packed_dei", kgen_array_sum, DBLE(SUM(kgenref_packed_dei, mask=(kgenref_packed_dei .eq. &
  1836:                   &kgenref_packed_dei))), .TRUE.)
  1837:               END IF
  1838:               READ (UNIT = kgen_unit) kgen_istrue
  1839:               IF (kgen_istrue) THEN
  1840:                   READ (UNIT = kgen_unit) kgen_array_sum
  1841:                   READ (UNIT = kgen_unit) kgenref_rel_fn_dum
  1842: V======>          CALL kgen_array_sumcheck("kgenref_rel_fn_dum", kgen_array_sum, DBLE(SUM(kgenref_rel_fn_dum, mask=(kgenref_rel_fn_dum .eq. &
  1843:                   &kgenref_rel_fn_dum))), .TRUE.)
  1844:               END IF
  1845:               READ (UNIT = kgen_unit) kgen_istrue
  1846:               IF (kgen_istrue) THEN
  1847:                   READ (UNIT = kgen_unit) kgen_array_sum
  1848:                   READ (UNIT = kgen_unit) kgenref_dsout2_dum
  1849: V======>          CALL kgen_array_sumcheck("kgenref_dsout2_dum", kgen_array_sum, DBLE(SUM(kgenref_dsout2_dum, mask=(kgenref_dsout2_dum .eq. &
  1850:                   &kgenref_dsout2_dum))), .TRUE.)
  1851:               END IF
  1852:               READ (UNIT = kgen_unit) kgen_istrue
  1853:               IF (kgen_istrue) THEN
  1854:                   READ (UNIT = kgen_unit) kgen_array_sum
  1855:                   READ (UNIT = kgen_unit) kgenref_drout_dum
  1856: V======>          CALL kgen_array_sumcheck("kgenref_drout_dum", kgen_array_sum, DBLE(SUM(kgenref_drout_dum, mask=(kgenref_drout_dum .eq. &
  1857:                   &kgenref_drout_dum))), .TRUE.)
  1858:               END IF
  1859:               READ (UNIT = kgen_unit) kgen_istrue
  1860:               IF (kgen_istrue) THEN
  1861:                   READ (UNIT = kgen_unit) kgen_array_sum
  1862:                   READ (UNIT = kgen_unit) kgenref_reff_rain_dum
  1863: V======>          CALL kgen_array_sumcheck("kgenref_reff_rain_dum", kgen_array_sum, DBLE(SUM(kgenref_reff_rain_dum, &
  1864:                   &mask=(kgenref_reff_rain_dum .eq. kgenref_reff_rain_dum))), .TRUE.)
  1865:               END IF
  1866:               READ (UNIT = kgen_unit) kgen_istrue
  1867:               IF (kgen_istrue) THEN
  1868:                   READ (UNIT = kgen_unit) kgen_array_sum
  1869:                   READ (UNIT = kgen_unit) kgenref_reff_snow_dum
  1870: V======>          CALL kgen_array_sumcheck("kgenref_reff_snow_dum", kgen_array_sum, DBLE(SUM(kgenref_reff_snow_dum, &
  1871:                   &mask=(kgenref_reff_snow_dum .eq. kgenref_reff_snow_dum))), .TRUE.)
  1872:               END IF
  1873:               READ (UNIT = kgen_unit) kgenref_errstring
  1874:           
  1875:           
  1876:              ! Set the col_type flag to grid or subcolumn dependent on the value of use_subcol_microp
  1877:           
  1878:              !-----------------------
  1879:              ! These physics buffer fields are read only and not set in this parameterization
  1880:              ! If these fields do not have subcolumn data, copy the grid to the subcolumn if subcolumns is turned on
  1881:              ! If subcolumns is not turned on, then these fields will be grid data
  1882:           
  1883:           
  1884:              !-----------------------
  1885:              ! These physics buffer fields are calculated and set in this parameterization
  1886:              ! If subcolumns is turned on, then these fields will be calculated on a subcolumn grid, otherwise they will be a normal grid
  1887:           
  1888:           
  1889:              !-----------------------
  1890:              ! If subcolumns is turned on, all calculated fields which are on subcolumns
  1891:              ! need to be retrieved on the grid as well for storing averaged values
  1892:           
  1893:           
  1894:              !-----------------------
  1895:              ! These are only on the grid regardless of whether subcolumns are turned on or not
  1896:           
  1897:           
  1898:              !-------------------------------------------------------------------------------------
  1899:              ! Microphysics assumes 'liquid stratus frac = ice stratus frac
  1900:              !                      = max( liquid stratus frac, ice stratus frac )'.
  1901:            
  1902:              ! Output initial in-cloud LWP (before microphysics)
  1903:           
  1904:           
  1905:              ! Initialize local state from input.
  1906:           
  1907:              ! Because of the of limited vertical resolution, there can be a signifcant
  1908:              ! warm bias at the cold point tropopause, which can create a wet bias in the
  1909:              ! stratosphere. For the microphysics only, update the cold point temperature, with
  1910:              ! an estimate of the coldest point between the model layers.
  1911:           
  1912:           
  1913:              ! Initialize ptend for output.
  1914:           
  1915:           
  1916:              ! the name 'cldwat' triggers special tests on cldliq
  1917:              ! and cldice in physics_update
  1918:           
  1919:           
  1920:              ! The following are all variables related to sizes, where it does not
  1921:              ! necessarily make sense to average over time steps. Instead, we keep
  1922:              ! the value from the last substep, which is what "accum_null" does.
  1923:           
  1924:              ! Pack input variables that are not updated during substeps.
  1925:           
  1926:           
  1927:               IF (kgen_evalstage) THEN
  1928:               END IF
  1929:               IF (kgen_warmupstage) THEN
  1930:               END IF
  1931:               IF (kgen_mainstage) THEN
  1932:               END IF
  1933:            
  1934:               !Uncomment following call statement to turn on perturbation experiment.
  1935:               !Adjust perturbation value and/or kind parameter if required.
  1936:               !CALL kgen_perturb_real( your_variable, 1.0E-15_8 )
  1937:            
  1938:            
  1939:               !call to kgen kernel
  1940:                       call micro_mg_tend2_0( &
  1941:                            mgncol,         nlev,           dtime/num_steps,&
  1942:                            packed_t,               packed_q,               &
  1943:                            packed_qc,              packed_qi,              &
  1944:                            packed_nc,              packed_ni,              &
  1945:                            packed_qr,              packed_qs,              &
  1946:                            packed_nr,              packed_ns,              &
  1947:                            packed_relvar,          packed_accre_enhan,     &
  1948:                            packed_p,               packed_pdel,            &
  1949:                            packed_cldn, packed_liqcldf, packed_icecldf, packed_qsatfac, &
  1950:                            packed_rate1ord_cw2pr_st,                       &
  1951:                            packed_naai,            packed_npccn,           &
  1952:                            packed_rndst,           packed_nacon,           &
  1953:                            packed_tlat,            packed_qvlat,           &
  1954:                            packed_qctend,          packed_qitend,          &
  1955:                            packed_nctend,          packed_nitend,          &
  1956:                            packed_qrtend,          packed_qstend,          &
  1957:                            packed_nrtend,          packed_nstend,          &
  1958:                            packed_rel,     rel_fn_dum,     packed_rei,     &
  1959:                            packed_sadice,          packed_sadsnow,         &
  1960:                            packed_prect,           packed_preci,           &
  1961:                            packed_nevapr,          packed_evapsnow,        &
  1962:                            packed_am_evp_st,                               &
  1963:                            packed_prain,           packed_prodsnow,        &
  1964:                            packed_cmeout,          packed_dei,             &
  1965:                            packed_mu,              packed_lambdac,         &
  1966:                            packed_qsout,           packed_des,             &
  1967:                            packed_cflx,    packed_iflx,                    &
  1968:                            packed_rflx,    packed_sflx,    packed_qrout,   &
  1969:                            reff_rain_dum,          reff_snow_dum,          &
  1970:                            packed_qcsevap, packed_qisevap, packed_qvres,   &
  1971:                            packed_cmei,    packed_vtrmc,   packed_vtrmi,   &
  1972:                            packed_umr,             packed_ums,             &
  1973:                            packed_qcsedten,        packed_qisedten,        &
  1974:                            packed_qrsedten,        packed_qssedten,        &
  1975:                            packed_pra,             packed_prc,             &
  1976:                            packed_mnuccc,  packed_mnucct,  packed_msacwi,  &
  1977:                            packed_psacws,  packed_bergs,   packed_berg,    &
  1978:                            packed_melt,            packed_homo,            &
  1979:                            packed_qcres,   packed_prci,    packed_prai,    &
  1980:                            packed_qires,   packed_mnuccr,  packed_pracs,   &
  1981:                            packed_meltsdt, packed_frzrdt,  packed_mnuccd,  &
  1982:                            packed_nrout,           packed_nsout,           &
  1983:                            packed_refl,    packed_arefl,   packed_areflz,  &
  1984:                            packed_frefl,   packed_csrfl,   packed_acsrfl,  &
  1985:                            packed_fcsrfl,          packed_rercld,          &
  1986:                            packed_ncai,            packed_ncal,            &
  1987:                            packed_qrout2,          packed_qsout2,          &
  1988:                            packed_nrout2,          packed_nsout2,          &
  1989:                            drout_dum,              dsout2_dum,             &
  1990:                            packed_freqs,           packed_freqr,           &
  1991:                            packed_nfice,           packed_qcrat,           &
  1992:                            errstring, &
  1993:                            packed_tnd_qsnow,packed_tnd_nsnow,packed_re_ice,&
  1994:                            packed_prer_evap,                                     &
  1995:                            packed_frzimm,  packed_frzcnt,  packed_frzdep   )
  1996:                       IF (kgen_mainstage) THEN
  1997:            
  1998:                           !verify init
  1999:                           CALL kgen_init_check(check_status, tolerance=5.D-10, verboseLevel=0)
  2000:            
  2001:                           !extern verify variables
  2002:            
  2003:                           !local verify variables
  2004:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_rate1ord_cw2pr_st", check_status, packed_rate1ord_cw2pr_st, &
  2005:                           &kgenref_packed_rate1ord_cw2pr_st)
  2006:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_tlat", check_status, packed_tlat, kgenref_packed_tlat)
  2007:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qvlat", check_status, packed_qvlat, kgenref_packed_qvlat)
  2008:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qctend", check_status, packed_qctend, kgenref_packed_qctend)
  2009:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qitend", check_status, packed_qitend, kgenref_packed_qitend)
  2010:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nctend", check_status, packed_nctend, kgenref_packed_nctend)
  2011:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nitend", check_status, packed_nitend, kgenref_packed_nitend)
  2012:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qrtend", check_status, packed_qrtend, kgenref_packed_qrtend)
  2013:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qstend", check_status, packed_qstend, kgenref_packed_qstend)
  2014:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nrtend", check_status, packed_nrtend, kgenref_packed_nrtend)
  2015:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nstend", check_status, packed_nstend, kgenref_packed_nstend)
  2016:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim1("packed_prect", check_status, packed_prect, kgenref_packed_prect)
  2017:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim1("packed_preci", check_status, packed_preci, kgenref_packed_preci)
  2018:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nevapr", check_status, packed_nevapr, kgenref_packed_nevapr)
  2019:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_am_evp_st", check_status, packed_am_evp_st, &
  2020:                           &kgenref_packed_am_evp_st)
  2021:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_evapsnow", check_status, packed_evapsnow, &
  2022:                           &kgenref_packed_evapsnow)
  2023:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_prain", check_status, packed_prain, kgenref_packed_prain)
  2024:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_prodsnow", check_status, packed_prodsnow, &
  2025:                           &kgenref_packed_prodsnow)
  2026:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_cmeout", check_status, packed_cmeout, kgenref_packed_cmeout)
  2027:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qsout", check_status, packed_qsout, kgenref_packed_qsout)
  2028:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_cflx", check_status, packed_cflx, kgenref_packed_cflx)
  2029:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_iflx", check_status, packed_iflx, kgenref_packed_iflx)
  2030:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_rflx", check_status, packed_rflx, kgenref_packed_rflx)
  2031:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_sflx", check_status, packed_sflx, kgenref_packed_sflx)
  2032:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qrout", check_status, packed_qrout, kgenref_packed_qrout)
  2033:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qcsevap", check_status, packed_qcsevap, &
  2034:                           &kgenref_packed_qcsevap)
  2035:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qisevap", check_status, packed_qisevap, &
  2036:                           &kgenref_packed_qisevap)
  2037:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qvres", check_status, packed_qvres, kgenref_packed_qvres)
  2038:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_cmei", check_status, packed_cmei, kgenref_packed_cmei)
  2039:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_vtrmc", check_status, packed_vtrmc, kgenref_packed_vtrmc)
  2040:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_vtrmi", check_status, packed_vtrmi, kgenref_packed_vtrmi)
  2041:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qcsedten", check_status, packed_qcsedten, &
  2042:                           &kgenref_packed_qcsedten)
  2043:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qisedten", check_status, packed_qisedten, &
  2044:                           &kgenref_packed_qisedten)
  2045:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qrsedten", check_status, packed_qrsedten, &
  2046:                           &kgenref_packed_qrsedten)
  2047:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qssedten", check_status, packed_qssedten, &
  2048:                           &kgenref_packed_qssedten)
  2049:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_umr", check_status, packed_umr, kgenref_packed_umr)
  2050:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_ums", check_status, packed_ums, kgenref_packed_ums)
  2051:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_pra", check_status, packed_pra, kgenref_packed_pra)
  2052:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_prc", check_status, packed_prc, kgenref_packed_prc)
  2053:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_mnuccc", check_status, packed_mnuccc, kgenref_packed_mnuccc)
  2054:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_mnucct", check_status, packed_mnucct, kgenref_packed_mnucct)
  2055:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_msacwi", check_status, packed_msacwi, kgenref_packed_msacwi)
  2056:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_psacws", check_status, packed_psacws, kgenref_packed_psacws)
  2057:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_bergs", check_status, packed_bergs, kgenref_packed_bergs)
  2058:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_berg", check_status, packed_berg, kgenref_packed_berg)
  2059:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_melt", check_status, packed_melt, kgenref_packed_melt)
  2060:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_homo", check_status, packed_homo, kgenref_packed_homo)
  2061:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qcres", check_status, packed_qcres, kgenref_packed_qcres)
  2062:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_prci", check_status, packed_prci, kgenref_packed_prci)
  2063:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_prai", check_status, packed_prai, kgenref_packed_prai)
  2064:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qires", check_status, packed_qires, kgenref_packed_qires)
  2065:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_mnuccr", check_status, packed_mnuccr, kgenref_packed_mnuccr)
  2066:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_pracs", check_status, packed_pracs, kgenref_packed_pracs)
  2067:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_meltsdt", check_status, packed_meltsdt, &
  2068:                           &kgenref_packed_meltsdt)
  2069:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_frzrdt", check_status, packed_frzrdt, kgenref_packed_frzrdt)
  2070:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_mnuccd", check_status, packed_mnuccd, kgenref_packed_mnuccd)
  2071:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nrout", check_status, packed_nrout, kgenref_packed_nrout)
  2072:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nsout", check_status, packed_nsout, kgenref_packed_nsout)
  2073:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_refl", check_status, packed_refl, kgenref_packed_refl)
  2074:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_arefl", check_status, packed_arefl, kgenref_packed_arefl)
  2075:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_areflz", check_status, packed_areflz, kgenref_packed_areflz)
  2076:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_frefl", check_status, packed_frefl, kgenref_packed_frefl)
  2077:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_csrfl", check_status, packed_csrfl, kgenref_packed_csrfl)
  2078:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_acsrfl", check_status, packed_acsrfl, kgenref_packed_acsrfl)
  2079:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_fcsrfl", check_status, packed_fcsrfl, kgenref_packed_fcsrfl)
  2080:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_rercld", check_status, packed_rercld, kgenref_packed_rercld)
  2081:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_ncai", check_status, packed_ncai, kgenref_packed_ncai)
  2082:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_ncal", check_status, packed_ncal, kgenref_packed_ncal)
  2083:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qrout2", check_status, packed_qrout2, kgenref_packed_qrout2)
  2084:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qsout2", check_status, packed_qsout2, kgenref_packed_qsout2)
  2085:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nrout2", check_status, packed_nrout2, kgenref_packed_nrout2)
  2086:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nsout2", check_status, packed_nsout2, kgenref_packed_nsout2)
  2087:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_freqs", check_status, packed_freqs, kgenref_packed_freqs)
  2088:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_freqr", check_status, packed_freqr, kgenref_packed_freqr)
  2089:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_nfice", check_status, packed_nfice, kgenref_packed_nfice)
  2090:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_prer_evap", check_status, packed_prer_evap, &
  2091:                           &kgenref_packed_prer_evap)
  2092:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_qcrat", check_status, packed_qcrat, kgenref_packed_qcrat)
  2093:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_rel", check_status, packed_rel, kgenref_packed_rel)
  2094:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_rei", check_status, packed_rei, kgenref_packed_rei)
  2095:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_sadice", check_status, packed_sadice, kgenref_packed_sadice)
  2096:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_sadsnow", check_status, packed_sadsnow, &
  2097:                           &kgenref_packed_sadsnow)
  2098:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_lambdac", check_status, packed_lambdac, &
  2099:                           &kgenref_packed_lambdac)
  2100:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_mu", check_status, packed_mu, kgenref_packed_mu)
  2101:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_des", check_status, packed_des, kgenref_packed_des)
  2102:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("packed_dei", check_status, packed_dei, kgenref_packed_dei)
  2103:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("rel_fn_dum", check_status, rel_fn_dum, kgenref_rel_fn_dum)
  2104:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("dsout2_dum", check_status, dsout2_dum, kgenref_dsout2_dum)
  2105:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("drout_dum", check_status, drout_dum, kgenref_drout_dum)
  2106:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("reff_rain_dum", check_status, reff_rain_dum, kgenref_reff_rain_dum)
  2107:                           CALL kv_micro_mg_cam_tend_pack_real__r8_dim2("reff_snow_dum", check_status, reff_snow_dum, kgenref_reff_snow_dum)
  2108:                           CALL kv_micro_mg_cam_tend_pack_character_128_("errstring", check_status, errstring, kgenref_errstring)
  2109:                           WRITE (*, *) ""
  2110:                           IF (check_status%verboseLevel > 0) THEN
  2111:                               WRITE (*, *) "Number of output variables: ", check_status%numTotal
  2112:                               WRITE (*, *) "Number of identical variables: ", check_status%numIdentical
  2113:                               WRITE (*, *) "Number of non-identical variables within tolerance: ", check_status%numInTol
  2114:                               WRITE (*, *) "Number of non-identical variables out of tolerance: ", check_status%numOutTol
  2115:                               WRITE (*, *) "Tolerance: ", kgen_tolerance
  2116:                           END IF
  2117:                           WRITE (*, *) ""
  2118:                           IF (check_status%numOutTol > 0) THEN
  2119:                               WRITE (*, *) "Verification FAILED"
  2120:                               check_status%Passed = .FALSE.
  2121:                               kgen_isverified = .FALSE.
  2122:                           ELSE
  2123:                               WRITE (*, *) "Verification PASSED"
  2124:                               check_status%Passed = .TRUE.
  2125:                               kgen_isverified = .TRUE.
  2126:                           END IF
  2127:                           WRITE (*, *) ""
  2128:                           CALL SYSTEM_CLOCK(kgen_start_clock, kgen_rate_clock)
  2129: +------>              do kgen_intvar=1,maxiter
  2130: |                     call micro_mg_tend2_0( &
  2131: |                          mgncol,         nlev,           dtime/num_steps,&
  2132: |                          packed_t,               packed_q,               &
  2133: |                          packed_qc,              packed_qi,              &
  2134: |                          packed_nc,              packed_ni,              &
  2135: |                          packed_qr,              packed_qs,              &
  2136: |                          packed_nr,              packed_ns,              &
  2137: |                          packed_relvar,          packed_accre_enhan,     &
  2138: |                          packed_p,               packed_pdel,            &
  2139: |                          packed_cldn, packed_liqcldf, packed_icecldf, packed_qsatfac, &
  2140: |                          packed_rate1ord_cw2pr_st,                       &
  2141: |                          packed_naai,            packed_npccn,           &
  2142: |                          packed_rndst,           packed_nacon,           &
  2143: |                          packed_tlat,            packed_qvlat,           &
  2144: |                          packed_qctend,          packed_qitend,          &
  2145: |                          packed_nctend,          packed_nitend,          &
  2146: |                          packed_qrtend,          packed_qstend,          &
  2147: |                          packed_nrtend,          packed_nstend,          &
  2148: |                          packed_rel,     rel_fn_dum,     packed_rei,     &
  2149: |                          packed_sadice,          packed_sadsnow,         &
  2150: |                          packed_prect,           packed_preci,           &
  2151: |                          packed_nevapr,          packed_evapsnow,        &
  2152: |                          packed_am_evp_st,                               &
  2153: |                          packed_prain,           packed_prodsnow,        &
  2154: |                          packed_cmeout,          packed_dei,             &
  2155: |                          packed_mu,              packed_lambdac,         &
  2156: |                          packed_qsout,           packed_des,             &
  2157: |                          packed_cflx,    packed_iflx,                    &
  2158: |                          packed_rflx,    packed_sflx,    packed_qrout,   &
  2159: |                          reff_rain_dum,          reff_snow_dum,          &
  2160: |                          packed_qcsevap, packed_qisevap, packed_qvres,   &
  2161: |                          packed_cmei,    packed_vtrmc,   packed_vtrmi,   &
  2162: |                          packed_umr,             packed_ums,             &
  2163: |                          packed_qcsedten,        packed_qisedten,        &
  2164: |                          packed_qrsedten,        packed_qssedten,        &
  2165: |                          packed_pra,             packed_prc,             &
  2166: |                          packed_mnuccc,  packed_mnucct,  packed_msacwi,  &
  2167: |                          packed_psacws,  packed_bergs,   packed_berg,    &
  2168: |                          packed_melt,            packed_homo,            &
  2169: |                          packed_qcres,   packed_prci,    packed_prai,    &
  2170: |                          packed_qires,   packed_mnuccr,  packed_pracs,   &
  2171: |                          packed_meltsdt, packed_frzrdt,  packed_mnuccd,  &
  2172: |                          packed_nrout,           packed_nsout,           &
  2173: |                          packed_refl,    packed_arefl,   packed_areflz,  &
  2174: |                          packed_frefl,   packed_csrfl,   packed_acsrfl,  &
  2175: |                          packed_fcsrfl,          packed_rercld,          &
  2176: |                          packed_ncai,            packed_ncal,            &
  2177: |                          packed_qrout2,          packed_qsout2,          &
  2178: |                          packed_nrout2,          packed_nsout2,          &
  2179: |                          drout_dum,              dsout2_dum,             &
  2180: |                          packed_freqs,           packed_freqr,           &
  2181: |                          packed_nfice,           packed_qcrat,           &
  2182: |                          errstring, &
  2183: |                          packed_tnd_qsnow,packed_tnd_nsnow,packed_re_ice,&
  2184: |                          packed_prer_evap,                                     &
  2185: |                          packed_frzimm,  packed_frzcnt,  packed_frzdep   )
  2186: +------               enddo
  2187:                       CALL SYSTEM_CLOCK(kgen_stop_clock, kgen_rate_clock)
  2188:                       kgen_measure = 1.0D6*(kgen_stop_clock - kgen_start_clock)/DBLE(kgen_rate_clock*maxiter)
  2189:                       WRITE (*, *) "micro_mg_tend2_0 : Time per call (usec): ", kgen_measure
  2190:                       END IF
  2191:                       IF (kgen_warmupstage) THEN
  2192:                       END IF
  2193:                       IF (kgen_evalstage) THEN
  2194:                       END IF
  2195:           
  2196:           
  2197:              ! Divide ptend by substeps.
  2198:           
  2199:              ! Use summed outputs to produce averages
  2200:           
  2201:           
  2202:              ! Check to make sure that the microphysics code is respecting the flags that control
  2203:              ! whether MG should be prognosing cloud ice and cloud liquid or not.
  2204:           
  2205:           
  2206:              !add condensate fluxes for MG2 (ice and snow already added for MG1)
  2207:           
  2208:           
  2209:              !! calculate effective radius of convective liquid and ice using dcon and deicon (not used by code, not useful for COSP)
  2210:              !! hard-coded as average of hard-coded values used for deep/shallow convective detrainment (near line 1502/1505)
  2211:           
  2212:              ! Reassign rate1 if modal aerosols
  2213:           
  2214:           
  2215:              ! Sedimentation velocity for liquid stratus cloud droplet
  2216:           
  2217:              ! Microphysical tendencies for use in the macrophysics at the next time step
  2218:           
  2219:              ! Net micro_mg_cam condensation rate
  2220:           
  2221:              ! For precip, accumulate only total precip in prec_pcw and snow_pcw variables.
  2222:              ! Other precip output variables are set to 0
  2223:              ! Do not subscript by ncol here, because in physpkg we divide the whole
  2224:              ! array and need to avoid an FPE due to uninitialized data.
  2225:           
  2226:           
  2227:              ! ------------------------------------------------------------ !
  2228:              ! Compute in cloud ice and liquid mixing ratios                !
  2229:              ! Note that 'iclwp, iciwp' are used for radiation computation. !
  2230:              ! ------------------------------------------------------------ !
  2231:           
  2232:           
  2233:              ! Calculate cloud fraction for prognostic precip sizes.
  2234:           
  2235:           
  2236:              ! ------------------------------------------------------ !
  2237:              ! ------------------------------------------------------ !
  2238:              ! All code from here to the end is on grid columns only  !
  2239:              ! ------------------------------------------------------ !
  2240:              ! ------------------------------------------------------ !
  2241:              ! Average the fields which are needed later in this paramterization to be on the grid
  2242:           
  2243:           
  2244:              ! If on subcolumns, average the rest of the pbuf fields which were modified on subcolumns but are not used further in
  2245:              ! this parameterization  (no need to assign in the non-subcolumn case -- the else step)
  2246:           
  2247:           
  2248:              ! ------------------------------------- !
  2249:              ! Size distribution calculation         !
  2250:              ! ------------------------------------- !
  2251:              ! Calculate rho (on subcolumns if turned on) for size distribution
  2252:              ! parameter calculations and average it if needed
  2253:              ! State instead of state_loc to preserve answers for MG1 (and in any
  2254:              ! case, it is unlikely to make much difference).
  2255:           
  2256:           
  2257:              !
  2258:           
  2259:              ! Effective radius for cloud liquid, fixed number.
  2260:           
  2261:           
  2262:              ! Effective radius for cloud liquid, and size parameters
  2263:              ! mu_grid and lambdac_grid.
  2264:           
  2265:              ! Calculate ncic on the grid
  2266:           
  2267:           
  2268:              ! Rain/Snow effective diameter.
  2269:           
  2270:           
  2271:              ! Effective radius and diameter for cloud ice.
  2272:           
  2273:           
  2274:              ! Limiters for low cloud fraction.
  2275:           
  2276:           
  2277:              ! ------------------------------------- !
  2278:              ! Precipitation efficiency Calculation  !
  2279:              ! ------------------------------------- !
  2280:              !-----------------------------------------------------------------------
  2281:              ! Liquid water path
  2282:              ! Compute liquid water paths, and column condensation
  2283:           
  2284:           
  2285:              ! note: 1e-6 kgho2/kgair/s * 1000. pa / (9.81 m/s2) / 1000 kgh2o/m3 = 1e-7 m/s
  2286:              ! this is 1ppmv of h2o in 10hpa
  2287:              ! alternatively: 0.1 mm/day * 1.e-4 m/mm * 1/86400 day/s = 1.e-9
  2288:              !-----------------------------------------------------------------------
  2289:              ! precipitation efficiency calculation  (accumulate cme and precip)
  2290:           
  2291:           
  2292:              ! zero out precip efficiency and total averaged precip
  2293:           
  2294:              ! accumulate precip and condensation
  2295:           
  2296:           
  2297:              !-----------------------------------------------------------------------
  2298:              ! vertical average of non-zero accretion, autoconversion and ratio.
  2299:              ! vars: vprco_grid(i),vprao_grid(i),racau_grid(i),cnt_grid
  2300:           
  2301:           
  2302:              ! --------------------- !
  2303:              ! History Output Fields !
  2304:              ! --------------------- !
  2305:              ! Column droplet concentration
  2306:           
  2307:           
  2308:              ! Averaging for new output fields
  2309:           
  2310:           
  2311:              ! Cloud top effective radius and number.
  2312:           
  2313:           
  2314:              ! Evaporation of stratiform precipitation fields for UNICON
  2315:           
  2316:           
  2317:              ! Assign the values to the pbuf pointers if they exist in pbuf
  2318:           
  2319:           
  2320:              ! --------------------------------------------- !
  2321:              ! General outfield calls for microphysics       !
  2322:              ! --------------------------------------------- !
  2323:              ! Output a handle of variables which are calculated on the fly
  2324:           
  2325:           
  2326:              ! Output fields which have not been averaged already, averaging if use_subcol_microp is true
  2327:           
  2328:           
  2329:              ! Example subcolumn outfld call
  2330:           
  2331:           
  2332:              ! Output fields which are already on the grid
  2333:           
  2334:           
  2335:              ! ptend_loc is deallocated in physics_update above
  2336:           
  2337:            
  2338:                       CONTAINS
  2339:            
  2340:           
  2341:                       !read state subroutine for kr_micro_mg_cam_tend_pack_real__r8_dim2
  2342:                       SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim2(var, kgen_unit, printname, printvar)
  2343:                           REAL(KIND=r8), INTENT(INOUT), ALLOCATABLE, DIMENSION(:,:) :: var
  2344:                           INTEGER, INTENT(IN) :: kgen_unit
  2345:                           CHARACTER(LEN=*), INTENT(IN) :: printname
  2346:                           LOGICAL, INTENT(IN), OPTIONAL :: printvar
  2347:                           LOGICAL :: kgen_istrue
  2348:                           REAL(KIND=8) :: kgen_array_sum
  2349:                           INTEGER :: idx1, idx2
  2350:                           INTEGER, DIMENSION(2,2) :: kgen_bound
  2351:            
  2352:                           READ (UNIT = kgen_unit) kgen_istrue
  2353:                           IF (kgen_istrue) THEN
  2354:                               IF (ALLOCATED( var )) THEN
  2355:                                   DEALLOCATE (var)
  2356:                               END IF
  2357:                               READ (UNIT = kgen_unit) kgen_array_sum
  2358:                               READ (UNIT = kgen_unit) kgen_bound(1, 1)
  2359:                               READ (UNIT = kgen_unit) kgen_bound(2, 1)
  2360:                               READ (UNIT = kgen_unit) kgen_bound(1, 2)
  2361:                               READ (UNIT = kgen_unit) kgen_bound(2, 2)
  2362:                               ALLOCATE (var(kgen_bound(1,1):kgen_bound(2,1), kgen_bound(1,2):kgen_bound(2,2)))
  2363:                               READ (UNIT = kgen_unit) var
  2364:                               CALL kgen_array_sumcheck(printname, kgen_array_sum, DBLE(SUM(var, mask=(var .eq. var))), .TRUE.)
  2365:                               IF (PRESENT( printvar ) .AND. printvar) THEN
  2366:                                   WRITE (*, *) "KGEN DEBUG: DBLE(SUM(" // printname // ")) = ", DBLE(SUM(var, mask=(var .eq. var)))
  2367:                               END IF
  2368:                           END IF
  2369:                       END SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim2
  2370:            
  2371:                       !read state subroutine for kr_micro_mg_cam_tend_pack_real__r8_dim3
  2372:                       SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim3(var, kgen_unit, printname, printvar)
  2373:                           REAL(KIND=r8), INTENT(INOUT), ALLOCATABLE, DIMENSION(:,:,:) :: var
  2374:                           INTEGER, INTENT(IN) :: kgen_unit
  2375:                           CHARACTER(LEN=*), INTENT(IN) :: printname
  2376:                           LOGICAL, INTENT(IN), OPTIONAL :: printvar
  2377:                           LOGICAL :: kgen_istrue
  2378:                           REAL(KIND=8) :: kgen_array_sum
  2379:                           INTEGER :: idx1, idx2, idx3
  2380:                           INTEGER, DIMENSION(2,3) :: kgen_bound
  2381:            
  2382:                           READ (UNIT = kgen_unit) kgen_istrue
  2383:                           IF (kgen_istrue) THEN
  2384:                               IF (ALLOCATED( var )) THEN
  2385:                                   DEALLOCATE (var)
  2386:                               END IF
  2387:                               READ (UNIT = kgen_unit) kgen_array_sum
  2388:                               READ (UNIT = kgen_unit) kgen_bound(1, 1)
  2389:                               READ (UNIT = kgen_unit) kgen_bound(2, 1)
  2390:                               READ (UNIT = kgen_unit) kgen_bound(1, 2)
  2391:                               READ (UNIT = kgen_unit) kgen_bound(2, 2)
  2392:                               READ (UNIT = kgen_unit) kgen_bound(1, 3)
  2393:                               READ (UNIT = kgen_unit) kgen_bound(2, 3)
  2394:                               ALLOCATE (var(kgen_bound(1,1):kgen_bound(2,1), kgen_bound(1,2):kgen_bound(2,2), &
  2395:                               &kgen_bound(1,3):kgen_bound(2,3)))
  2396:                               READ (UNIT = kgen_unit) var
  2397:                               CALL kgen_array_sumcheck(printname, kgen_array_sum, DBLE(SUM(var, mask=(var .eq. var))), .TRUE.)
  2398:                               IF (PRESENT( printvar ) .AND. printvar) THEN
  2399:                                   WRITE (*, *) "KGEN DEBUG: DBLE(SUM(" // printname // ")) = ", DBLE(SUM(var, mask=(var .eq. var)))
  2400:                               END IF
  2401:                           END IF
  2402:                       END SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim3
  2403:            
  2404:                       !verify state subroutine for kv_micro_mg_cam_tend_pack_real__r8_dim2
  2405:                       RECURSIVE SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim2(varname, check_status, var, kgenref_var)
  2406:                           CHARACTER(LEN=*), INTENT(IN) :: varname
  2407:                           TYPE(check_t), INTENT(INOUT) :: check_status
  2408:                           REAL(KIND=r8), INTENT(IN), DIMENSION(:,:) :: var, kgenref_var
  2409:                           INTEGER :: check_result
  2410:                           LOGICAL :: is_print = .FALSE.
  2411:            
  2412:                           INTEGER :: idx1, idx2
  2413:                           INTEGER :: n
  2414:                           real(KIND=r8) :: nrmsdiff, rmsdiff
  2415:                           real(KIND=r8), ALLOCATABLE :: buf1(:,:), buf2(:,:)
  2416:            
  2417:                           check_status%numTotal = check_status%numTotal + 1
  2418:            
  2419:                           IF (ALL(var == kgenref_var)) THEN
  2420:                               check_status%numIdentical = check_status%numIdentical + 1
  2421:                               IF (check_status%verboseLevel > 1) THEN
  2422:                                   WRITE (*, *) trim(adjustl(varname)), " is IDENTICAL."
  2423:                               END IF
  2424:                               check_result = CHECK_IDENTICAL
  2425:                           ELSE
  2426:                               ALLOCATE (buf1(SIZE(var,dim=1),SIZE(var,dim=2)))
  2427:                               ALLOCATE (buf2(SIZE(var,dim=1),SIZE(var,dim=2)))
  2428:                               n = COUNT(var /= kgenref_var)
  2429:                               WHERE ( ABS(kgenref_var) > kgen_minvalue )
  2430:                                   buf1 = ((var-kgenref_var)/kgenref_var)**2
  2431:                                   buf2 = (var-kgenref_var)**2
  2432:                               ELSEWHERE
  2433:                                   buf1 = (var-kgenref_var)**2
  2434:                                   buf2 = buf1
  2435:                               END WHERE
  2436:                               nrmsdiff = SQRT(SUM(buf1)/DBLE(n))
  2437:                               rmsdiff = SQRT(SUM(buf2)/DBLE(n))
  2438:                               IF (nrmsdiff > kgen_tolerance) THEN
  2439:                                   check_status%numOutTol = check_status%numOutTol + 1
  2440:                                   IF (check_status%verboseLevel > 0) THEN
  2441:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(out of tolerance)."
  2442:                                   END IF
  2443:                                   check_result = CHECK_OUT_TOL
  2444:                               ELSE
  2445:                                   check_status%numInTol = check_status%numInTol + 1
  2446:                                   IF (check_status%verboseLevel > 0) THEN
  2447:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(within tolerance)."
  2448:                                   END IF
  2449:                                   check_result = CHECK_IN_TOL
  2450:                               END IF
  2451:                           END IF
  2452:                           IF (check_result == CHECK_IDENTICAL) THEN
  2453:                               IF (check_status%verboseLevel > 2) THEN
  2454:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2455:                                   WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2456:                                   WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2457:                                   WRITE (*, *) "RMS of difference is ", 0
  2458:                                   WRITE (*, *) "Normalized RMS of difference is ", 0
  2459:                                   WRITE (*, *) ""
  2460:                               END IF
  2461:                           ELSE IF (check_result == CHECK_OUT_TOL) THEN
  2462:                               IF (check_status%verboseLevel > 0) THEN
  2463:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2464:                                   WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2465:                                   WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2466:                                   WRITE (*, *) "RMS of difference is ", rmsdiff
  2467:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2468:                                   WRITE (*, *) ""
  2469:                               END IF
  2470:                           ELSE IF (check_result == CHECK_IN_TOL) THEN
  2471:                               IF (check_status%verboseLevel > 1) THEN
  2472:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2473:                                   WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2474:                                   WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2475:                                   WRITE (*, *) "RMS of difference is ", rmsdiff
  2476:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2477:                                   WRITE (*, *) ""
  2478:                               END IF
  2479:                           END IF
  2480:            
  2481:                       END SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim2
  2482:            
  2483:                       !verify state subroutine for kv_micro_mg_cam_tend_pack_real__r8_dim1
  2484:                       RECURSIVE SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim1(varname, check_status, var, kgenref_var)
  2485:                           CHARACTER(LEN=*), INTENT(IN) :: varname
  2486:                           TYPE(check_t), INTENT(INOUT) :: check_status
  2487:                           REAL(KIND=r8), INTENT(IN), DIMENSION(:) :: var, kgenref_var
  2488:                           INTEGER :: check_result
  2489:                           LOGICAL :: is_print = .FALSE.
  2490:            
  2491:                           INTEGER :: idx1
  2492:                           INTEGER :: n
  2493:                           real(KIND=r8) :: nrmsdiff, rmsdiff
  2494:                           real(KIND=r8), ALLOCATABLE :: buf1(:), buf2(:)
  2495:            
  2496:                           check_status%numTotal = check_status%numTotal + 1
  2497:            
  2498:                           IF (ALL(var == kgenref_var)) THEN
  2499:                               check_status%numIdentical = check_status%numIdentical + 1
  2500:                               IF (check_status%verboseLevel > 1) THEN
  2501:                                   WRITE (*, *) trim(adjustl(varname)), " is IDENTICAL."
  2502:                               END IF
  2503:                               check_result = CHECK_IDENTICAL
  2504:                           ELSE
  2505:                               ALLOCATE (buf1(SIZE(var,dim=1)))
  2506:                               ALLOCATE (buf2(SIZE(var,dim=1)))
  2507:                               n = COUNT(var /= kgenref_var)
  2508:                               WHERE ( ABS(kgenref_var) > kgen_minvalue )
  2509:                                   buf1 = ((var-kgenref_var)/kgenref_var)**2
  2510:                                   buf2 = (var-kgenref_var)**2
  2511:                               ELSEWHERE
  2512:                                   buf1 = (var-kgenref_var)**2
  2513:                                   buf2 = buf1
  2514:                               END WHERE
  2515:                               nrmsdiff = SQRT(SUM(buf1)/DBLE(n))
  2516:                               rmsdiff = SQRT(SUM(buf2)/DBLE(n))
  2517:                               IF (nrmsdiff > kgen_tolerance) THEN
  2518:                                   check_status%numOutTol = check_status%numOutTol + 1
  2519:                                   IF (check_status%verboseLevel > 0) THEN
  2520:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(out of tolerance)."
  2521:                                   END IF
  2522:                                   check_result = CHECK_OUT_TOL
  2523:                               ELSE
  2524:                                   check_status%numInTol = check_status%numInTol + 1
  2525:                                   IF (check_status%verboseLevel > 0) THEN
  2526:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(within tolerance)."
  2527:                                   END IF
  2528:                                   check_result = CHECK_IN_TOL
  2529:                               END IF
  2530:                           END IF
  2531:                           IF (check_result == CHECK_IDENTICAL) THEN
  2532:                               IF (check_status%verboseLevel > 2) THEN
  2533:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2534:                                   WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2535:                                   WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2536:                                   WRITE (*, *) "RMS of difference is ", 0
  2537:                                   WRITE (*, *) "Normalized RMS of difference is ", 0
  2538:                                   WRITE (*, *) ""
  2539:                               END IF
  2540:                           ELSE IF (check_result == CHECK_OUT_TOL) THEN
  2541:                               IF (check_status%verboseLevel > 0) THEN
  2542:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2543:                                   WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2544:                                   WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2545:                                   WRITE (*, *) "RMS of difference is ", rmsdiff
  2546:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2547:                                   WRITE (*, *) ""
  2548:                               END IF
  2549:                           ELSE IF (check_result == CHECK_IN_TOL) THEN
  2550:                               IF (check_status%verboseLevel > 1) THEN
  2551:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2552:                                   WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2553:                                   WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2554:                                   WRITE (*, *) "RMS of difference is ", rmsdiff
  2555:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2556:                                   WRITE (*, *) ""
  2557:                               END IF
  2558:                           END IF
  2559:            
  2560:                       END SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim1
  2561:            
  2562:                       !verify state subroutine for kv_micro_mg_cam_tend_pack_character_128_
  2563:                       RECURSIVE SUBROUTINE kv_micro_mg_cam_tend_pack_character_128_(varname, check_status, var, kgenref_var)
  2564:                           CHARACTER(LEN=*), INTENT(IN) :: varname
  2565:                           TYPE(check_t), INTENT(INOUT) :: check_status
  2566:                           CHARACTER(LEN=128), INTENT(IN) :: var, kgenref_var
  2567:                           INTEGER :: check_result
  2568:                           LOGICAL :: is_print = .FALSE.
  2569:            
  2570:                           character(LEN=128) :: diff
  2571:            
  2572:                           check_status%numTotal = check_status%numTotal + 1
  2573:            
  2574:                           IF (var == kgenref_var) THEN
  2575:                               check_status%numIdentical = check_status%numIdentical + 1
  2576:                               IF (check_status%verboseLevel > 1) THEN
  2577:                                   WRITE (*, *) trim(adjustl(varname)), " is IDENTICAL."
  2578:                               END IF
  2579:                               check_result = CHECK_IDENTICAL
  2580:                           ELSE
  2581:                               check_status%numOutTol = check_status%numOutTol + 1
  2582:                               IF (check_status%verboseLevel > 0) THEN
  2583:                                   WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL."
  2584:                               END IF
  2585:                               check_result = CHECK_OUT_TOL
  2586:                           END IF
  2587:                           IF (check_result == CHECK_IDENTICAL) THEN
  2588:                               IF (check_status%verboseLevel > 2) THEN
  2589:                                   WRITE (*, *) "NOT IMPLEMENTED"
  2590:                                   WRITE (*, *) ""
  2591:                               END IF
  2592:                           ELSE IF (check_result == CHECK_OUT_TOL) THEN
  2593:                               IF (check_status%verboseLevel > 0) THEN
  2594:                                   WRITE (*, *) "NOT IMPLEMENTED"
  2595:                                   WRITE (*, *) ""
  2596:                               END IF
  2597:                           ELSE IF (check_result == CHECK_IN_TOL) THEN
  2598:                               IF (check_status%verboseLevel > 1) THEN
  2599:                                   WRITE (*, *) "NOT IMPLEMENTED"
  2600:                                   WRITE (*, *) ""
  2601:                               END IF
  2602:                           END IF
  2603:            
  2604:                       END SUBROUTINE kv_micro_mg_cam_tend_pack_character_128_
  2605:            
  2606:           END SUBROUTINE micro_mg_cam_tend_pack


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KR_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM2
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  2364: inl(1212): Source for routine not found.: KGEN_UTILS_MOD::KGEN_ARRAY_SUMCHECK
  2364: vec( 126): Idiom detected.: SUM
  2364: opt(1592): Outer loop unrolled inside inner loop.
  2364: vec( 101): Vectorized loop.
  2366: vec( 126): Idiom detected.: SUM
  2366: opt(1592): Outer loop unrolled inside inner loop.
  2366: vec( 101): Vectorized loop.


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KR_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM2
FORMAT LIST

 LINE   LOOP      STATEMENT

  2342:                       SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim2(var, kgen_unit, printname, printvar)
  2343:                           REAL(KIND=r8), INTENT(INOUT), ALLOCATABLE, DIMENSION(:,:) :: var
  2344:                           INTEGER, INTENT(IN) :: kgen_unit
  2345:                           CHARACTER(LEN=*), INTENT(IN) :: printname
  2346:                           LOGICAL, INTENT(IN), OPTIONAL :: printvar
  2347:                           LOGICAL :: kgen_istrue
  2348:                           REAL(KIND=8) :: kgen_array_sum
  2349:                           INTEGER :: idx1, idx2
  2350:                           INTEGER, DIMENSION(2,2) :: kgen_bound
  2351:            
  2352:                           READ (UNIT = kgen_unit) kgen_istrue
  2353:                           IF (kgen_istrue) THEN
  2354:                               IF (ALLOCATED( var )) THEN
  2355:                                   DEALLOCATE (var)
  2356:                               END IF
  2357:                               READ (UNIT = kgen_unit) kgen_array_sum
  2358:                               READ (UNIT = kgen_unit) kgen_bound(1, 1)
  2359:                               READ (UNIT = kgen_unit) kgen_bound(2, 1)
  2360:                               READ (UNIT = kgen_unit) kgen_bound(1, 2)
  2361:                               READ (UNIT = kgen_unit) kgen_bound(2, 2)
  2362:                               ALLOCATE (var(kgen_bound(1,1):kgen_bound(2,1), kgen_bound(1,2):kgen_bound(2,2)))
  2363:                               READ (UNIT = kgen_unit) var
  2364: V======>                      CALL kgen_array_sumcheck(printname, kgen_array_sum, DBLE(SUM(var, mask=(var .eq. var))), .TRUE.)
  2365:                               IF (PRESENT( printvar ) .AND. printvar) THEN
  2366: V======>                          WRITE (*, *) "KGEN DEBUG: DBLE(SUM(" // printname // ")) = ", DBLE(SUM(var, mask=(var .eq. var)))
  2367:                               END IF
  2368:                           END IF
  2369:                       END SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim2


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KR_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM3
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  2397: inl(1212): Source for routine not found.: KGEN_UTILS_MOD::KGEN_ARRAY_SUMCHECK
  2397: vec( 126): Idiom detected.: SUM
  2397: opt(1592): Outer loop unrolled inside inner loop.
  2397: vec( 101): Vectorized loop.
  2399: vec( 126): Idiom detected.: SUM
  2399: opt(1592): Outer loop unrolled inside inner loop.
  2399: vec( 101): Vectorized loop.


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KR_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM3
FORMAT LIST

 LINE   LOOP      STATEMENT

  2372:                       SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim3(var, kgen_unit, printname, printvar)
  2373:                           REAL(KIND=r8), INTENT(INOUT), ALLOCATABLE, DIMENSION(:,:,:) :: var
  2374:                           INTEGER, INTENT(IN) :: kgen_unit
  2375:                           CHARACTER(LEN=*), INTENT(IN) :: printname
  2376:                           LOGICAL, INTENT(IN), OPTIONAL :: printvar
  2377:                           LOGICAL :: kgen_istrue
  2378:                           REAL(KIND=8) :: kgen_array_sum
  2379:                           INTEGER :: idx1, idx2, idx3
  2380:                           INTEGER, DIMENSION(2,3) :: kgen_bound
  2381:            
  2382:                           READ (UNIT = kgen_unit) kgen_istrue
  2383:                           IF (kgen_istrue) THEN
  2384:                               IF (ALLOCATED( var )) THEN
  2385:                                   DEALLOCATE (var)
  2386:                               END IF
  2387:                               READ (UNIT = kgen_unit) kgen_array_sum
  2388:                               READ (UNIT = kgen_unit) kgen_bound(1, 1)
  2389:                               READ (UNIT = kgen_unit) kgen_bound(2, 1)
  2390:                               READ (UNIT = kgen_unit) kgen_bound(1, 2)
  2391:                               READ (UNIT = kgen_unit) kgen_bound(2, 2)
  2392:                               READ (UNIT = kgen_unit) kgen_bound(1, 3)
  2393:                               READ (UNIT = kgen_unit) kgen_bound(2, 3)
  2394:                               ALLOCATE (var(kgen_bound(1,1):kgen_bound(2,1), kgen_bound(1,2):kgen_bound(2,2), &
  2395:                               &kgen_bound(1,3):kgen_bound(2,3)))
  2396:                               READ (UNIT = kgen_unit) var
  2397: V======>                      CALL kgen_array_sumcheck(printname, kgen_array_sum, DBLE(SUM(var, mask=(var .eq. var))), .TRUE.)
  2398:                               IF (PRESENT( printvar ) .AND. printvar) THEN
  2399: V======>                          WRITE (*, *) "KGEN DEBUG: DBLE(SUM(" // printname // ")) = ", DBLE(SUM(var, mask=(var .eq. var)))
  2400:                               END IF
  2401:                           END IF
  2402:                       END SUBROUTINE kr_micro_mg_cam_tend_pack_real__r8_dim3


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM2
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  2419: vec( 126): Idiom detected.: BIT-OP
  2419: vec( 101): Vectorized loop.
  2422: vec( 118): Unvectorizable data type.
  2422: vec( 103): Unvectorized loop.
  2422: vec( 108): Unvectorizable loop structure.
  2428: vec( 101): Vectorized loop.
  2429: vec( 101): Vectorized loop.
  2436: vec( 126): Idiom detected.: SUM
  2436: opt(1593): Loop nest collapsed into one loop.
  2436: vec( 101): Vectorized loop.
  2437: vec( 126): Idiom detected.: SUM
  2437: opt(1593): Loop nest collapsed into one loop.
  2437: vec( 101): Vectorized loop.
  2441: vec( 118): Unvectorizable data type.
  2441: vec( 103): Unvectorized loop.
  2441: vec( 108): Unvectorizable loop structure.
  2447: vec( 118): Unvectorizable data type.
  2447: vec( 103): Unvectorized loop.
  2447: vec( 108): Unvectorizable loop structure.
  2454: vec( 101): Vectorized loop.
  2455: vec( 126): Idiom detected.: SUM
  2455: opt(1592): Outer loop unrolled inside inner loop.
  2455: vec( 101): Vectorized loop.
  2456: vec( 126): Idiom detected.: SUM
  2456: opt(1592): Outer loop unrolled inside inner loop.
  2456: vec( 101): Vectorized loop.
  2463: vec( 101): Vectorized loop.
  2464: vec( 126): Idiom detected.: SUM
  2464: opt(1592): Outer loop unrolled inside inner loop.
  2464: vec( 101): Vectorized loop.
  2465: vec( 126): Idiom detected.: SUM
  2465: opt(1592): Outer loop unrolled inside inner loop.
  2465: vec( 101): Vectorized loop.
  2472: vec( 101): Vectorized loop.
  2473: vec( 126): Idiom detected.: SUM
  2473: opt(1592): Outer loop unrolled inside inner loop.
  2473: vec( 101): Vectorized loop.
  2474: vec( 126): Idiom detected.: SUM
  2474: opt(1592): Outer loop unrolled inside inner loop.
  2474: vec( 101): Vectorized loop.


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM2
FORMAT LIST

 LINE   LOOP      STATEMENT

  2405:                       RECURSIVE SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim2(varname, check_status, var, kgenref_var)
  2406:                           CHARACTER(LEN=*), INTENT(IN) :: varname
  2407:                           TYPE(check_t), INTENT(INOUT) :: check_status
  2408:                           REAL(KIND=r8), INTENT(IN), DIMENSION(:,:) :: var, kgenref_var
  2409:                           INTEGER :: check_result
  2410:                           LOGICAL :: is_print = .FALSE.
  2411:            
  2412:                           INTEGER :: idx1, idx2
  2413:                           INTEGER :: n
  2414:                           real(KIND=r8) :: nrmsdiff, rmsdiff
  2415:                           real(KIND=r8), ALLOCATABLE :: buf1(:,:), buf2(:,:)
  2416:            
  2417:                           check_status%numTotal = check_status%numTotal + 1
  2418:            
  2419: V======>                  IF (ALL(var == kgenref_var)) THEN
  2420:                               check_status%numIdentical = check_status%numIdentical + 1
  2421:                               IF (check_status%verboseLevel > 1) THEN
  2422:                                   WRITE (*, *) trim(adjustl(varname)), " is IDENTICAL."
  2423:                               END IF
  2424:                               check_result = CHECK_IDENTICAL
  2425:                           ELSE
  2426:                               ALLOCATE (buf1(SIZE(var,dim=1),SIZE(var,dim=2)))
  2427:                               ALLOCATE (buf2(SIZE(var,dim=1),SIZE(var,dim=2)))
  2428: V======>                      n = COUNT(var /= kgenref_var)
  2429: V======>                      WHERE ( ABS(kgenref_var) > kgen_minvalue )
  2430: |                                 buf1 = ((var-kgenref_var)/kgenref_var)**2
  2431: |                                 buf2 = (var-kgenref_var)**2
  2432: |                             ELSEWHERE
  2433: |                                 buf1 = (var-kgenref_var)**2
  2434: |                                 buf2 = buf1
  2435: V======                       END WHERE
  2436:                               nrmsdiff = SQRT(SUM(buf1)/DBLE(n))
  2437: W======>                      rmsdiff = SQRT(SUM(buf2)/DBLE(n))
  2438: W======>                      IF (nrmsdiff > kgen_tolerance) THEN
  2439:                                   check_status%numOutTol = check_status%numOutTol + 1
  2440:                                   IF (check_status%verboseLevel > 0) THEN
  2441:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(out of tolerance)."
  2442:                                   END IF
  2443:                                   check_result = CHECK_OUT_TOL
  2444:                               ELSE
  2445:                                   check_status%numInTol = check_status%numInTol + 1
  2446:                                   IF (check_status%verboseLevel > 0) THEN
  2447:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(within tolerance)."
  2448:                                   END IF
  2449:                                   check_result = CHECK_IN_TOL
  2450:                               END IF
  2451:                           END IF
  2452:                           IF (check_result == CHECK_IDENTICAL) THEN
  2453:                               IF (check_status%verboseLevel > 2) THEN
  2454:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2455: V======>                          WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2456: V======>                          WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2457: V======>                          WRITE (*, *) "RMS of difference is ", 0
  2458:                                   WRITE (*, *) "Normalized RMS of difference is ", 0
  2459:                                   WRITE (*, *) ""
  2460:                               END IF
  2461:                           ELSE IF (check_result == CHECK_OUT_TOL) THEN
  2462:                               IF (check_status%verboseLevel > 0) THEN
  2463:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2464: V======>                          WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2465: V======>                          WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2466: V======>                          WRITE (*, *) "RMS of difference is ", rmsdiff
  2467:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2468:                                   WRITE (*, *) ""
  2469:                               END IF
  2470:                           ELSE IF (check_result == CHECK_IN_TOL) THEN
  2471:                               IF (check_status%verboseLevel > 1) THEN
  2472:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2473: V======>                          WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2474: V======>                          WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2475: V======>                          WRITE (*, *) "RMS of difference is ", rmsdiff
  2476:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2477:                                   WRITE (*, *) ""
  2478:                               END IF
  2479:                           END IF
  2480:            
  2481:                       END SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim2


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM1
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  2498: vec( 126): Idiom detected.: BIT-OP
  2498: vec( 101): Vectorized loop.
  2501: vec( 118): Unvectorizable data type.
  2501: vec( 103): Unvectorized loop.
  2501: vec( 108): Unvectorizable loop structure.
  2507: vec( 101): Vectorized loop.
  2508: vec( 101): Vectorized loop.
  2515: vec( 126): Idiom detected.: SUM
  2515: vec( 101): Vectorized loop.
  2516: vec( 126): Idiom detected.: SUM
  2516: vec( 101): Vectorized loop.
  2520: vec( 118): Unvectorizable data type.
  2520: vec( 103): Unvectorized loop.
  2520: vec( 108): Unvectorizable loop structure.
  2526: vec( 118): Unvectorizable data type.
  2526: vec( 103): Unvectorized loop.
  2526: vec( 108): Unvectorizable loop structure.
  2533: vec( 101): Vectorized loop.
  2534: vec( 126): Idiom detected.: SUM
  2534: vec( 101): Vectorized loop.
  2535: vec( 126): Idiom detected.: SUM
  2535: vec( 101): Vectorized loop.
  2542: vec( 101): Vectorized loop.
  2543: vec( 126): Idiom detected.: SUM
  2543: vec( 101): Vectorized loop.
  2544: vec( 126): Idiom detected.: SUM
  2544: vec( 101): Vectorized loop.
  2551: vec( 101): Vectorized loop.
  2552: vec( 126): Idiom detected.: SUM
  2552: vec( 101): Vectorized loop.
  2553: vec( 126): Idiom detected.: SUM
  2553: vec( 101): Vectorized loop.


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_REAL__R8_DIM1
FORMAT LIST

 LINE   LOOP      STATEMENT

  2484:                       RECURSIVE SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim1(varname, check_status, var, kgenref_var)
  2485:                           CHARACTER(LEN=*), INTENT(IN) :: varname
  2486:                           TYPE(check_t), INTENT(INOUT) :: check_status
  2487:                           REAL(KIND=r8), INTENT(IN), DIMENSION(:) :: var, kgenref_var
  2488:                           INTEGER :: check_result
  2489:                           LOGICAL :: is_print = .FALSE.
  2490:            
  2491:                           INTEGER :: idx1
  2492:                           INTEGER :: n
  2493:                           real(KIND=r8) :: nrmsdiff, rmsdiff
  2494:                           real(KIND=r8), ALLOCATABLE :: buf1(:), buf2(:)
  2495:            
  2496:                           check_status%numTotal = check_status%numTotal + 1
  2497:            
  2498: V======>                  IF (ALL(var == kgenref_var)) THEN
  2499:                               check_status%numIdentical = check_status%numIdentical + 1
  2500:                               IF (check_status%verboseLevel > 1) THEN
  2501:                                   WRITE (*, *) trim(adjustl(varname)), " is IDENTICAL."
  2502:                               END IF
  2503:                               check_result = CHECK_IDENTICAL
  2504:                           ELSE
  2505:                               ALLOCATE (buf1(SIZE(var,dim=1)))
  2506:                               ALLOCATE (buf2(SIZE(var,dim=1)))
  2507: V======>                      n = COUNT(var /= kgenref_var)
  2508: V======>                      WHERE ( ABS(kgenref_var) > kgen_minvalue )
  2509: |                                 buf1 = ((var-kgenref_var)/kgenref_var)**2
  2510: |                                 buf2 = (var-kgenref_var)**2
  2511: |                             ELSEWHERE
  2512: |                                 buf1 = (var-kgenref_var)**2
  2513: |                                 buf2 = buf1
  2514: V======                       END WHERE
  2515:                               nrmsdiff = SQRT(SUM(buf1)/DBLE(n))
  2516: V======>                      rmsdiff = SQRT(SUM(buf2)/DBLE(n))
  2517: V======>                      IF (nrmsdiff > kgen_tolerance) THEN
  2518:                                   check_status%numOutTol = check_status%numOutTol + 1
  2519:                                   IF (check_status%verboseLevel > 0) THEN
  2520:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(out of tolerance)."
  2521:                                   END IF
  2522:                                   check_result = CHECK_OUT_TOL
  2523:                               ELSE
  2524:                                   check_status%numInTol = check_status%numInTol + 1
  2525:                                   IF (check_status%verboseLevel > 0) THEN
  2526:                                       WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL(within tolerance)."
  2527:                                   END IF
  2528:                                   check_result = CHECK_IN_TOL
  2529:                               END IF
  2530:                           END IF
  2531:                           IF (check_result == CHECK_IDENTICAL) THEN
  2532:                               IF (check_status%verboseLevel > 2) THEN
  2533:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2534: V======>                          WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2535: V======>                          WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2536: V======>                          WRITE (*, *) "RMS of difference is ", 0
  2537:                                   WRITE (*, *) "Normalized RMS of difference is ", 0
  2538:                                   WRITE (*, *) ""
  2539:                               END IF
  2540:                           ELSE IF (check_result == CHECK_OUT_TOL) THEN
  2541:                               IF (check_status%verboseLevel > 0) THEN
  2542:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2543: V======>                          WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2544: V======>                          WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2545: V======>                          WRITE (*, *) "RMS of difference is ", rmsdiff
  2546:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2547:                                   WRITE (*, *) ""
  2548:                               END IF
  2549:                           ELSE IF (check_result == CHECK_IN_TOL) THEN
  2550:                               IF (check_status%verboseLevel > 1) THEN
  2551:                                   WRITE (*, *) count( var /= kgenref_var), " of ", size( var ), " elements are different."
  2552: V======>                          WRITE (*, *) "Average - kernel ", sum(var)/real(size(var))
  2553: V======>                          WRITE (*, *) "Average - reference ", sum(kgenref_var)/real(size(kgenref_var))
  2554: V======>                          WRITE (*, *) "RMS of difference is ", rmsdiff
  2555:                                   WRITE (*, *) "Normalized RMS of difference is ", nrmsdiff
  2556:                                   WRITE (*, *) ""
  2557:                               END IF
  2558:                           END IF
  2559:            
  2560:                       END SUBROUTINE kv_micro_mg_cam_tend_pack_real__r8_dim1


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_CHARACTER_128_
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  2577: vec( 118): Unvectorizable data type.
  2577: vec( 103): Unvectorized loop.
  2577: vec( 108): Unvectorizable loop structure.
  2583: vec( 118): Unvectorizable data type.
  2583: vec( 103): Unvectorized loop.
  2583: vec( 108): Unvectorizable loop structure.


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::MICRO_MG_CAM_TEND_PACK::KV_MICRO_MG_CAM_TEND_PACK_CHARACTER_128_
FORMAT LIST

 LINE   LOOP      STATEMENT

  2563:                       RECURSIVE SUBROUTINE kv_micro_mg_cam_tend_pack_character_128_(varname, check_status, var, kgenref_var)
  2564:                           CHARACTER(LEN=*), INTENT(IN) :: varname
  2565:                           TYPE(check_t), INTENT(INOUT) :: check_status
  2566:                           CHARACTER(LEN=128), INTENT(IN) :: var, kgenref_var
  2567:                           INTEGER :: check_result
  2568:                           LOGICAL :: is_print = .FALSE.
  2569:            
  2570:                           character(LEN=128) :: diff
  2571:            
  2572:                           check_status%numTotal = check_status%numTotal + 1
  2573:            
  2574:                           IF (var == kgenref_var) THEN
  2575:                               check_status%numIdentical = check_status%numIdentical + 1
  2576:                               IF (check_status%verboseLevel > 1) THEN
  2577:                                   WRITE (*, *) trim(adjustl(varname)), " is IDENTICAL."
  2578:                               END IF
  2579:                               check_result = CHECK_IDENTICAL
  2580:                           ELSE
  2581:                               check_status%numOutTol = check_status%numOutTol + 1
  2582:                               IF (check_status%verboseLevel > 0) THEN
  2583:                                   WRITE (*, *) trim(adjustl(varname)), " is NOT IDENTICAL."
  2584:                               END IF
  2585:                               check_result = CHECK_OUT_TOL
  2586:                           END IF
  2587:                           IF (check_result == CHECK_IDENTICAL) THEN
  2588:                               IF (check_status%verboseLevel > 2) THEN
  2589:                                   WRITE (*, *) "NOT IMPLEMENTED"
  2590:                                   WRITE (*, *) ""
  2591:                               END IF
  2592:                           ELSE IF (check_result == CHECK_OUT_TOL) THEN
  2593:                               IF (check_status%verboseLevel > 0) THEN
  2594:                                   WRITE (*, *) "NOT IMPLEMENTED"
  2595:                                   WRITE (*, *) ""
  2596:                               END IF
  2597:                           ELSE IF (check_result == CHECK_IN_TOL) THEN
  2598:                               IF (check_status%verboseLevel > 1) THEN
  2599:                                   WRITE (*, *) "NOT IMPLEMENTED"
  2600:                                   WRITE (*, *) ""
  2601:                               END IF
  2602:                           END IF
  2603:            
  2604:                       END SUBROUTINE kv_micro_mg_cam_tend_pack_character_128_


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::KR_EXTERNS_IN_MICRO_MG_CAM
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  No diagnostic message.


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::KR_EXTERNS_IN_MICRO_MG_CAM
FORMAT LIST

 LINE   LOOP      STATEMENT

  2610:           SUBROUTINE kr_externs_in_micro_mg_cam(kgen_unit)
  2611:               INTEGER, INTENT(IN) :: kgen_unit
  2612:               LOGICAL :: kgen_istrue
  2613:               REAL(KIND=8) :: kgen_array_sum
  2614:            
  2615:               READ (UNIT = kgen_unit) num_steps
  2616:           END SUBROUTINE kr_externs_in_micro_mg_cam


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::KR_EXTERNS_OUT_MICRO_MG_CAM
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  No diagnostic message.


NEC Fortran Compiler (1.3.0) for Vector Engine   Fri Aug 17 18:48:32 2018
FILE NAME: micro_mg_cam.F90

PROCEDURE NAME: MICRO_MG_CAM::KR_EXTERNS_OUT_MICRO_MG_CAM
FORMAT LIST

 LINE   LOOP      STATEMENT

  2619:           SUBROUTINE kr_externs_out_micro_mg_cam(kgen_unit)
  2620:               INTEGER, INTENT(IN) :: kgen_unit
  2621:            
  2622:               LOGICAL :: kgen_istrue
  2623:               REAL(KIND=8) :: kgen_array_sum
  2624:           END SUBROUTINE kr_externs_out_micro_mg_cam


