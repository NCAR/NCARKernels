&perfect_model_obs_nml
   read_input_state_from_file = .true.,
   single_file_in             = .false.
   input_state_files          = 'wrfinput_d01', 'wrfinput_d02'

   write_output_state_to_file = .true.,
   single_file_out            = .false.
   output_state_files         = 'perfect_output_d01.nc', 'perfect_output_d02.nc'
   output_interval            = 1,

   async                      = 0,
   adv_ens_command            = './advance_model.csh',

   obs_seq_in_file_name       = 'obs_seq.in',
   obs_seq_out_file_name      = 'obs_seq.out',
   init_time_days             = -1,
   init_time_seconds          = -1,
   first_obs_days             = -1,
   first_obs_seconds          = -1,
   last_obs_days              = -1,
   last_obs_seconds           = -1,

   trace_execution            = .false.,
   output_timestamps          = .false.,
   print_every_nth_obs        = -1,
   output_forward_op_errors   = .false.,
   silence                    = .false.,
   /

&filter_nml
   single_file_in               = .false.,
   input_state_files            = ''
   input_state_file_list        = 'restart_files_in_d01.txt', 'restart_files_in_d02.txt'

   stages_to_write  = 'preassim', 'output'

   single_file_out              = .false.,
   output_state_files           = ''
   output_state_file_list       = 'restart_files_out_d01.txt', 'restart_files_out_d02.txt'
   output_interval              = 1,
   output_members               = .true.
   num_output_state_members     = 50,
   output_mean                  = .true.
   output_sd                    = .true.

   ens_size                     = 80,
   num_groups                   = 1,
   perturb_from_single_instance = .false.,
   perturbation_amplitude       = 0.2,
   distributed_state            = .true.

   async                        = 2,
   adv_ens_command              = './advance_model.csh',

   obs_sequence_in_name         = 'obs_seq.out',
   obs_sequence_out_name        = 'obs_seq.final',
   num_output_obs_members       = 3,
   init_time_days               = -1,
   init_time_seconds            = -1,
   first_obs_days               = -1,
   first_obs_seconds            = -1,
   last_obs_days                = -1,
   last_obs_seconds             = -1,

   inf_flavor                  = 0,                       0,
   inf_initial_from_restart    = .false.,                 .false.,
   inf_sd_initial_from_restart = .false.,                 .false.,
   inf_deterministic           = .true.,                  .true.,
   inf_initial                 = 1.00,                   1.00,
   inf_sd_initial              = 0.80,                   0.50,
   inf_damping                 = 0.90,                   1.00,
   inf_lower_bound             = 1.0,                    1.0,
   inf_upper_bound             = 10000.0,              10000.0,
   inf_sd_lower_bound          = 0.80,                   0.10

   trace_execution              = .true.,
   output_timestamps            = .true.,
   silence                      = .false.,
/

&quality_control_nml
   input_qc_threshold       = 4.0,
   outlier_threshold        = 4.0,
   /   

&ensemble_manager_nml
   layout = 2, 
   tasks_per_node = 36, 
    /

&smoother_nml
   num_lags              = 0
   start_from_restart    = .false.
   output_restart        = .false.
   restart_in_file_name  = 'smoother_ics'
   restart_out_file_name = 'smoother_restart' /

&assim_tools_nml
   filter_kind                     = 1,
   cutoff                          = 0.16,
   sort_obs_inc                    = .false.,
   spread_restoration              = .false.,
   sampling_error_correction       = .false.,
   print_every_nth_obs             = 1000,
   adaptive_localization_threshold = -1 /

&cov_cutoff_nml
   select_localization             = 1  /

&assim_model_nml
/

&location_nml
   horiz_dist_only                 = .false.,
   vert_normalization_pressure     = 187500.0
   vert_normalization_height       = 5000000.0,
   vert_normalization_level        = 2666.7,
   approximate_distance            = .false.,
   nlon                            = 141,
   nlat = 72  /

   #vert_normalization_scale_height = 5.0,

&model_nml
   default_state_variables     = .false.
   wrf_state_variables         = 'U',     'QTY_U_WIND_COMPONENT',     'TYPE_U',   'UPDATE','999',
                                 'V',     'QTY_V_WIND_COMPONENT',      'TYPE_V',  'UPDATE','999',
                                 'W',     'QTY_VERTICAL_VELOCITY',     'TYPE_W',  'UPDATE','999',
                                 'PH',    'QTY_GEOPOTENTIAL_HEIGHT',   'TYPE_GZ', 'UPDATE','999',
                                 'T',     'QTY_POTENTIAL_TEMPERATURE', 'TYPE_T',  'UPDATE','999',
                                 'MU',    'QTY_PRESSURE',              'TYPE_MU', 'UPDATE','999',
                                 'QVAPOR','QTY_VAPOR_MIXING_RATIO',    'TYPE_QV', 'UPDATE','999',
                                 'QCLOUD','QTY_CLOUD_LIQUID_WATER',    'TYPE_QC', 'UPDATE','999',
                                 'QRAIN', 'QTY_RAINWATER_MIXING_RATIO','TYPE_QR', 'UPDATE','999',
                                 'U10',   'QTY_U_WIND_COMPONENT',      'TYPE_U10','UPDATE','999',
                                 'V10',   'QTY_V_WIND_COMPONENT',      'TYPE_V10','UPDATE','999',
                                 'T2',    'QTY_TEMPERATURE',           'TYPE_T2', 'UPDATE','999',
                                 'TH2',   'QTY_POTENTIAL_TEMPERATURE', 'TYPE_TH2','UPDATE','999',
                                 'Q2',    'QTY_SPECIFIC_HUMIDITY',     'TYPE_Q2', 'UPDATE','999',
                                 'PSFC',  'QTY_PRESSURE',              'TYPE_PS', 'UPDATE','999',
   wrf_state_bounds            = 'QVAPOR','0.0','NULL','CLAMP',
                                 'QRAIN', '0.0','NULL','CLAMP',
                                 'QCLOUD','0.0','NULL','CLAMP',
   num_moist_vars              = 3,
   num_domains                 = 2,
   calendar_type               = 3,
   surf_obs                    = .true.,
   assimilation_period_seconds = 21600,
   adv_mod_command             = './wrf.exe',
   vert_localization_coord     = 3,
   center_search_half_length   = 400000.0,
   center_spline_grid_scale    = 10,
   circulation_pres_level      = 80000.0,
   circulation_radius          = 108000.0,
   sfc_elev_max_diff           = -1.0,
   polar                       = .false.,
   periodic_x                  = .false.,
   periodic_y                  = .false.,
   scm                         = .false.  /


# polar and periodic_x are used in global wrf.  if polar is true, the 
# grid interpolation routines will wrap over the north & south poles.  
# if periodic_x is true, when the east and west edges of the grid are
# reached the interpolation will wrap.  note this is a separate issue
# from regional models which cross the GMT line; those grids are marked
# as having a negative offset and do not need to wrap; this flag controls
# what happens when the edges of the grid are reached.

# the scm flag is used for the 'single column model' version of WRF.
# it needs the periodic_x and periodic_y flags set to true, in which
# case the X and Y directions are periodic; no collapsing of the grid
# into a single location like the 3d-spherical polar flag implies.

&dart_to_wrf_nml
  model_advance_file = .false.,
  dart_restart_name = 'filter_ics.0001',
  adv_mod_command   = './wrf.exe',
 /

&wrf_to_dart_nml
   dart_restart_name   = 'dart_wrf_vector',
   print_data_ranges   = .false.,
   debug               = .false.
   /

&utilities_nml
   TERMLEVEL                   = 1,
   logfilename                 = 'dart_log.out',
   nmlfilename                 = 'dart_log.nml',
   write_nml                   = 'file',
   module_details              = .false.  
   /

&mpi_utilities_nml
   reverse_task_layout = .true.
   /

&reg_factor_nml
   select_regression           = 1,
   input_reg_file              = "time_mean_reg",
   save_reg_diagnostics        = .false.,
   reg_diagnostics_file        = 'reg_diagnostics'  /

&obs_sequence_nml
   write_binary_obs_sequence   = .false.  /

&preprocess_nml
   input_obs_kind_mod_file  = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90',
   output_obs_kind_mod_file = '../../../assimilation_code/modules/observations/obs_kind_mod.f90',
   input_obs_def_mod_file   = '../../../../observations/forward_operators/DEFAULT_obs_def_mod.F90',
   output_obs_def_mod_file  = '../../../../observations/forward_operators/obs_def_mod.f90',
   input_files              = '../../../../observations/forward_operators/obs_def_reanalysis_bufr_mod.f90',
                              '../../../../observations/forward_operators/obs_def_altimeter_mod.f90',
                              '../../../../observations/forward_operators/obs_def_radar_mod.f90',
                              '../../../../observations/forward_operators/obs_def_metar_mod.f90',
                              '../../../../observations/forward_operators/obs_def_dew_point_mod.f90',
                              '../../../../observations/forward_operators/obs_def_gps_mod.f90',
                              '../../../../observations/forward_operators/obs_def_gts_mod.f90',
                              '../../../../observations/forward_operators/obs_def_QuikSCAT_mod.f90',
                              '../../../../observations/forward_operators/obs_def_vortex_mod.f90'  /

#   assimilate_these_obs_types = 'LAND_SFC_PRESSURE'

&obs_kind_nml
  assimilate_these_obs_types = 'RADIOSONDE_TEMPERATURE',
                                'RADIOSONDE_U_WIND_COMPONENT',
                                'RADIOSONDE_V_WIND_COMPONENT',
                                'RADIOSONDE_SURFACE_ALTIMETER',
                                'RADIOSONDE_SPECIFIC_HUMIDITY',
                                'LAND_SFC_U_WIND_COMPONENT',
                                'LAND_SFC_V_WIND_COMPONENT',
                                'LAND_SFC_TEMPERATURE',
                                'LAND_SFC_SPECIFIC_HUMIDITY',
                                'MARINE_SFC_U_WIND_COMPONENT',
                                'MARINE_SFC_V_WIND_COMPONENT',
                                'MARINE_SFC_TEMPERATURE',
                                'MARINE_SFC_SPECIFIC_HUMIDITY',
                                'AIRCRAFT_U_WIND_COMPONENT',
                                'AIRCRAFT_V_WIND_COMPONENT',
                                'AIRCRAFT_TEMPERATURE',
                                'ACARS_U_WIND_COMPONENT',
                                'ACARS_V_WIND_COMPONENT',
                                'ACARS_TEMPERATURE',
                                'SAT_U_WIND_COMPONENT',
                                'SAT_V_WIND_COMPONENT',
  /


# Notes for obs_def_radar_mod_nml:
# (1) Reflectivity limit can be applied both to observations or state (forward operator).
# (2) Default lowest_reflectivity values DART will use (if apply_reflectivity_limit = .true.)
#     is missing_r8. If you want to use the default, delete the line of respective
#     lowest_reflectivity.
# (3) As it is not clear how to assimilate Z (for now), "convert_to_dbz" is reset to .true.
#     even if you set it to .false. here in the namelist.

&obs_def_radar_mod_nml
   apply_ref_limit_to_obs     =  .true. ,
   reflectivity_limit_obs     =     0.0 ,
   lowest_reflectivity_obs    =     0.0 ,
   apply_ref_limit_to_fwd_op  =  .true. ,
   reflectivity_limit_fwd_op  =     0.0 ,
   lowest_reflectivity_fwd_op =     0.0 ,
   dielectric_factor          =   0.224 ,
   n0_rain                    =   8.0e6 ,
   n0_graupel                 =   4.0e6 ,
   n0_snow                    =   3.0e6 ,
   rho_rain                   =  1000.0 ,
   rho_graupel                =   400.0 ,
   rho_snow                   =   100.0 ,
   allow_wet_graupel          = .false. ,
   microphysics_type          =       3 , 
   allow_dbztowt_conv         = .false. /

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, 360]

&obs_diag_nml
   obs_sequence_name          = 'obs_seq.final',
   first_bin_center =  2007, 4, 26, 00, 0, 0 ,
   last_bin_center  =  2007, 4, 27, 00, 0, 0 ,
   bin_separation             =     0, 0, 0, 6, 0, 0 ,
   bin_width                  =     0, 0, 0, 6, 0, 0 ,
   time_to_skip               =     0, 0, 0, 0, 0, 0 ,
   max_num_bins               = 1000,
   rat_cri                    = 5000.0,
   lonlim1    = 0.0,
   lonlim2    = 360.0,
   latlim1    = -89.0,
   latlim2    =  89.0, 
   reg_names  = 'Full Domain',
   print_mismatched_locs      = .false.,
   print_obs_locations        = .false.,
   verbose                    = .false.  /

&merge_obs_seq_nml
   num_input_files = 2,
   filename_seq    = 'obs_seq.new_1', 'obs_seq.new_2'
   filename_out    = 'obs_seq.final'   /

&restart_file_tool_nml
   input_file_name              = "run5/assim_model_state_ud.0003_148403_21600_3",
   output_file_name             = "run5/assim_model_state_ud.0003_148403_21600_3_ascii",
   ens_size                     = 1,
   single_restart_file_in       = .true.,
   single_restart_file_out      = .true.,
   write_binary_restart_files   = .false.,
   overwrite_data_time          = .false.,
   new_data_days                = -1,
   new_data_secs                = -1,
   input_is_model_advance_file  = .false.,
   output_is_model_advance_file = .false.,
   overwrite_advance_time       = .false.,
   new_advance_days             = -1,
   new_advance_secs             = -1,
 /

&obs_sequence_tool_nml
   num_input_files    = 1,
   filename_seq       = 'obs_seq20070425',
   filename_out       = 'obs_seq.out',
   print_only         =  .false.,
   first_obs_days     = 148402,
   first_obs_seconds  = 75601,
   last_obs_days      = 148403,
   last_obs_seconds   = 10800,
   gregorian_cal      = .true.
 /

&schedule_nml
   calendar        = 'Gregorian',  
   first_bin_start =  2007, 4, 25,21, 0, 0 ,
   first_bin_end   =  2007, 4, 26, 3, 0, 0 ,
   last_bin_end    =  2007, 4, 26, 3, 0, 0 ,
   bin_interval_days    = 0,
   bin_interval_seconds = 21600,   
   max_num_bins         = 1000,    
   print_table          = .true.,  
   /
   
&obs_seq_to_netcdf_nml             
   obs_sequence_name = 'obs_seq.final',
   obs_sequence_list = '',
   append_to_netcdf  = .false.,
   lonlim1    =    0.0,
   lonlim2    =  360.0,        
   latlim1    =  -90.0,        
   latlim2    =   90.0,        
   verbose    = .false.,       
   /                           
                               
&state_vector_io_nml
   /   


! these have no defaults (or the defaults are missing_r8 which
! cannot be represented in a namelist).  here are examples
! of their use:
!
! keep only observations with a DART QC of 0:
!   qc_metadata        = 'Dart quality control',
!   min_qc             = 0,
!   max_qc             = 0,
!
! keep only radiosonde temp obs between 250 and 300 K:
!   copy_metadata      = 'NCEP BUFR observation',
!   copy_type          = 'RADIOSONDE_TEMPERATURE', 
!   min_copy           = 250.0,
!   max_copy           = 300.0,
!
! keep only the U and V radiosonde winds:
!   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT', 
!                        'RADIOSONDE_V_WIND_COMPONENT',
!   keep_types         = .true.,
!
! remove the U and V radiosonde winds:
!   obs_types          = 'RADIOSONDE_U_WIND_COMPONENT', 
!                        'RADIOSONDE_V_WIND_COMPONENT',
!   keep_types         = .false.,
!

